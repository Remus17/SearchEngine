



C Sharp (programming language) - Wikipedia
document.documentElement.className = document.documentElement.className.replace( /(^|\s)client-nojs(\s|$)/, "$1client-js$2" );
(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"C_Sharp_(programming_language)","wgTitle":"C Sharp (programming language)","wgCurRevisionId":833278529,"wgRevisionId":833278529,"wgArticleId":2356196,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Articles with inconsistent citation formats","Use mdy dates from October 2012","Use British English Oxford spelling from December 2011","Pages using deprecated image syntax","All articles with unsourced statements","Articles with unsourced statements from February 2010","Articles with example C Sharp code","Wikipedia articles with LCCN identifiers","Wikipedia articles with GND identifiers","Wikipedia articles with BNF identifiers","American inventions","Programming languages","C Sharp programming language family",".NET programming languages","Class-based programming languages","Ecma standards","Functional languages","IEC standards","ISO standards","Programming languages created in 2000","Programming languages with an ISO standard","Statically typed programming languages","2000 software","High-level programming languages"],"wgBreakFrames":false,"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgMonthNamesShort":["","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"wgRelevantPageName":"C_Sharp_(programming_language)","wgRelevantArticleId":2356196,"wgRequestId":"WsGEPApAICoAADUMhakAAAAL","wgIsProbablyEditable":true,"wgRelevantPageIsProbablyEditable":true,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgFlaggedRevsParams":{"tags":{}},"wgStableRevisionId":null,"wgWikiEditorEnabledModules":[],"wgBetaFeaturesFeatures":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgPopupsShouldSendModuleToUser":true,"wgPopupsConflictsWithNavPopupGadget":false,"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en","usePageImages":true,"usePageDescriptions":true},"wgPreferredVariant":"en","wgMFExpandAllSectionsUserOption":true,"wgMFEnableFontChanger":true,"wgMFDisplayWikibaseDescriptions":{"search":true,"nearby":true,"watchlist":true,"tagline":false},"wgRelatedArticles":null,"wgRelatedArticlesUseCirrusSearch":true,"wgRelatedArticlesOnlyUseCirrusSearch":false,"wgULSCurrentAutonym":"English","wgNoticeProject":"wikipedia","wgCentralNoticeCookiesToDelete":[],"wgCentralNoticeCategoriesUsingLegacy":["Fundraising","fundraising"],"wgCategoryTreePageCategoryOptions":"{\"mode\":0,\"hideprefix\":20,\"showcount\":true,\"namespaces\":false}","wgWikibaseItemId":"Q2370","wgScoreNoteLanguages":{"arabic":"العربية","catalan":"català","deutsch":"Deutsch","english":"English","espanol":"español","italiano":"italiano","nederlands":"Nederlands","norsk":"norsk","portugues":"português","suomi":"suomi","svenska":"svenska","vlaams":"West-Vlams"},"wgScoreDefaultNoteLanguage":"nederlands","wgCentralAuthMobileDomain":false,"wgCodeMirrorEnabled":false,"wgVisualEditorToolbarScrollOffset":0,"wgVisualEditorUnsupportedEditParams":["undo","undoafter","veswitched"],"wgEditSubmitButtonLabelPublish":true});mw.loader.state({"ext.gadget.charinsert-styles":"ready","ext.globalCssJs.user.styles":"ready","ext.globalCssJs.site.styles":"ready","site.styles":"ready","noscript":"ready","user.styles":"ready","user":"ready","user.options":"ready","user.tokens":"loading","ext.cite.styles":"ready","ext.pygments":"ready","wikibase.client.init":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.uls.interlanguage":"ready","ext.wikimediaBadges":"ready","mediawiki.legacy.shared":"ready","mediawiki.legacy.commonPrint":"ready","mediawiki.sectionAnchor":"ready","mediawiki.skinning.interface":"ready","skins.vector.styles":"ready","ext.globalCssJs.user":"ready","ext.globalCssJs.site":"ready"});mw.loader.implement("user.tokens@1dqfd7l",function($,jQuery,require,module){/*@nomin*/mw.user.tokens.set({"editToken":"+\\","patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});
});mw.loader.load(["ext.cite.a11y","site","mediawiki.page.startup","mediawiki.user","mediawiki.hidpi","mediawiki.page.ready","mediawiki.toc","mediawiki.searchSuggest","ext.gadget.teahouse","ext.gadget.ReferenceTooltips","ext.gadget.watchlist-notice","ext.gadget.DRN-wizard","ext.gadget.charinsert","ext.gadget.refToolbar","ext.gadget.extra-toolbar-buttons","ext.gadget.switcher","ext.centralauth.centralautologin","mmv.head","mmv.bootstrap.autostart","ext.popups","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","ext.eventLogging.subscriber","ext.wikimediaEvents","ext.navigationTiming","ext.uls.eventlogger","ext.uls.init","ext.uls.compactlinks","ext.uls.interface","ext.3d","ext.centralNotice.geoIP","ext.centralNotice.startUp","skins.vector.js"]);});























		
		
		
			
			

C Sharp (programming language)			
				From Wikipedia, the free encyclopedia				
								
					Jump to:					navigation, 					search
				
				The correct title of this article is C# (programming language). The substitution or omission of the # is due to technical restrictions.

C#




Paradigm
Structured, imperative, object-oriented, event-driven, task-driven, functional, generic, reflective, concurrent


Family
C


Designed by
Microsoft


Developer
Microsoft


First appeared
2000; 18 years ago (2000)[1]





Stable release

7.2[2] / November 15, 2017; 4 months ago (2017-11-15)



Preview release

8.0[3]






Typing discipline
static, dynamic,[4] strong, safe, nominative, partially inferred


Platform
Common Language Infrastructure


License

CLR: MIT/X11[5]
Mono compiler: dual GPLv3 and MIT/X11
Libraries: LGPLv2
DotGNU: dual GPL and LGPLv2


Filename extensions
.cs


Website
docs.microsoft.com/dotnet/csharp/language-reference/


Major implementations


Visual C#, .NET Framework, Mono, DotGNU


Dialects


Cω, Spec#, Polyphonic C#, Enhanced C#


Influenced by


C++,[6] Eiffel, Java,[6] Modula-3, Object Pascal,[7] ML, VB, Icon, Haskell, Rust, J#, Cω, F#,[a] J++


Influenced


Chapel,[8] Crystal,[9] D, J#, Dart,[10] F#, Hack, Java,[11][12] Kotlin, Monkey, Nemerle, Oxygene, Ring[13], Rust, Swift,[14] Vala




 C Sharp Programming at Wikibooks




C#[b] (/si: ʃɑːrp/) is a multi-paradigm programming language encompassing strong typing, imperative, declarative, functional, generic, object-oriented (class-based), and component-oriented programming disciplines. It was developed by Microsoft within its .NET initiative and later approved as a standard by Ecma (ECMA-334) and ISO (ISO/IEC 23270:2006). C# is one of the programming languages designed for the Common Language Infrastructure.
C# is a general-purpose, object-oriented programming language.[15] Its development team is led by Anders Hejlsberg. The most recent version is C# 7.2, which was released in 2017 along with Visual Studio 2017 version 15.5.[16]



Contents


1 Design goals
2 History

2.1 Name
2.2 Versions
2.3 New features


3 Syntax
4 Distinguishing features

4.1 Portability
4.2 Typing
4.3 Metaprogramming
4.4 Methods and functions
4.5 Property
4.6 Namespace
4.7 Memory access
4.8 Exception
4.9 Polymorphism
4.10 Language Integrated Query - LINQ
4.11 Functional programming


5 Common type system

5.1 Categories of data types
5.2 Boxing and unboxing


6 Libraries
7 Examples
8 Standardization and licensing
9 Implementations
10 See also
11 Notes
12 References
13 Further reading
14 External links



Design goals[edit]
The ECMA standard lists these design goals for C#:[15]

The language is intended to be a simple, modern, general-purpose, object-oriented programming language.
The language, and implementations thereof, should provide support for software engineering principles such as strong type checking, array bounds checking, detection of attempts to use uninitialized variables, and automatic garbage collection. Software robustness, durability, and programmer productivity are important.
The language is intended for use in developing software components suitable for deployment in distributed environments.
Portability is very important for source code and programmers, especially those already familiar with C and C++.
Support for internationalization is very important.
C# is intended to be suitable for writing applications for both hosted and embedded systems, ranging from the very large that use sophisticated operating systems, down to the very small having dedicated functions.
Although C# applications are intended to be economical with regard to memory and processing power requirements, the language was not intended to compete directly on performance and size with C or assembly language.

History[edit]
During the development of the .NET Framework, the class libraries were originally written using a managed code compiler system called Simple Managed C (SMC).[17][18] In January 1999, Anders Hejlsberg formed a team to build a new language at the time called Cool, which stood for "C-like Object Oriented Language".[19] Microsoft had considered keeping the name "Cool" as the final name of the language, but chose not to do so for trademark reasons. By the time the .NET project was publicly announced at the July 2000 Professional Developers Conference, the language had been renamed C#, and the class libraries and ASP.NET runtime had been ported to C#.
Hejlsberg is C#'s principal designer and lead architect at Microsoft, and was previously involved with the design of Turbo Pascal, Embarcadero Delphi (formerly CodeGear Delphi, Inprise Delphi and Borland Delphi), and Visual J++. In interviews and technical papers he has stated that flaws[citation needed] in most major programming languages (e.g. C++, Java, Delphi, and Smalltalk) drove the fundamentals of the Common Language Runtime (CLR), which, in turn, drove the design of the C# language itself.
James Gosling, who created the Java programming language in 1994, and Bill Joy, a co-founder of Sun Microsystems, the originator of Java, called C# an "imitation" of Java; Gosling further said that "[C# is] sort of Java with reliability, productivity and security deleted."[20][21] Klaus Kreft and Angelika Langer (authors of a C++ streams book) stated in a blog post that "Java and C# are almost identical programming languages. Boring repetition that lacks innovation,"[22] "Hardly anybody will claim that Java or C# are revolutionary programming languages that changed the way we write programs," and "C# borrowed a lot from Java - and vice versa. Now that C# supports boxing and unboxing, we'll have a very similar feature in Java."[23] In July 2000, Hejlsberg said that C# is "not a Java clone" and is "much closer to C++" in its design.[24]
Since the release of C# 2.0 in November 2005, the C# and Java languages have evolved on increasingly divergent trajectories, becoming two very different languages. One of the first major departures came with the addition of generics to both languages, with vastly different implementations. C# makes use of reification to provide "first-class" generic objects that can be used like any other class, with code generation performed at class-load time.[25] Furthermore, C# has added several major features to accommodate functional-style programming, culminating in the LINQ extensions released with C# 3.0 and its supporting framework of lambda expressions, extension methods, and anonymous types.[26] These features enable C# programmers to use functional programming techniques, such as closures, when it is advantageous to their application. The LINQ extensions and the functional imports help developers reduce the amount of boilerplate code that is included in common tasks like querying a database, parsing an xml file, or searching through a data structure, shifting the emphasis onto the actual program logic to help improve readability and maintainability.[27]
C# used to have a mascot called Andy (named after Anders Hejlsberg). It was retired on January 29, 2004.[28]
C# was originally submitted to the ISO subcommittee JTC 1/SC 22 for review,[29] under ISO/IEC 23270:2003,[30] was withdrawn and was then approved under ISO/IEC 23270:2006.[31]
Name[edit]




C-sharp musical note


The name "C sharp" was inspired by musical notation where a sharp indicates that the written note should be made a semitone higher in pitch.[32] This is similar to the language name of C++, where "++" indicates that a variable should be incremented by 1. The sharp symbol also resembles a ligature of four "+" symbols (in a two-by-two grid), further implying that the language is an increment of C++.[33]
Due to technical limitations of display (standard fonts, browsers, etc.) and the fact that the sharp symbol (U+266F ♯ MUSIC SHARP SIGN (HTML &#9839;)) is not present on most keyboard layouts, the number sign (U+0023 # NUMBER SIGN (HTML &#35;)) was chosen to approximate the sharp symbol in the written name of the programming language.[34] This convention is reflected in the ECMA-334 C# Language Specification.[15] However, when it is practical to do so (for example, in advertising or in box art[35]), Microsoft uses the intended musical symbol.
The "sharp" suffix has been used by a number of other .NET languages that are variants of existing languages, including J# (a .NET language also designed by Microsoft that is derived from Java 1.1), A# (from Ada), and the functional programming language F#.[36] The original implementation of Eiffel for .NET was called Eiffel#,[37] a name retired since the full Eiffel language is now supported. The suffix has also been used for libraries, such as Gtk# (a .NET wrapper for GTK+ and other GNOME libraries) and Cocoa# (a wrapper for Cocoa).
Versions[edit]


Version
Language specification
Date
.NET Framework
Visual Studio


ECMA
ISO/IEC
Microsoft


C# 1.0
December 2002
April 2003
January 2002
January 2002
.NET Framework 1.0
Visual Studio .NET 2002


C# 1.1
C# 1.2
October 2003
April 2003
.NET Framework 1.1
Visual Studio .NET 2003


C# 2.0
June 2006
September 2006
September 2005[c]
November 2005
.NET Framework 2.0
Visual Studio 2005


C# 3.0
None[d]
August 2007
November 2007

.NET Framework 2.0 (Except LINQ)[38]
.NET Framework 3.0 (Except LINQ)[38]
.NET Framework 3.5

Visual Studio 2008
Visual Studio 2010


C# 4.0
April 2010
April 2010
.NET Framework 4
Visual Studio 2010


C# 5.0
December 2017
None[d]
June 2013
August 2012
.NET Framework 4.5
Visual Studio 2012
Visual Studio 2013


C# 6.0
None[d]
Draft
July 2015
.NET Framework 4.6
Visual Studio 2015


C# 7.0
None
March 2017
.NET Framework 4.6.2
Visual Studio 2017


C# 7.1
None
None
None
August 2017
.NET Framework 4.6.2
Visual Studio 2017 version 15.3[39]


C# 7.2
None
None
None
November 2017
.NET Framework 4.7.1
Visual Studio 2017 version 15.5[40]


New features[edit]

C# 2.0


Generics[41]
Partial types[41]
Anonymous methods[41]
Iterators[41]
Nullable types[41]
Getter/setter separate accessibility[41]
Method group conversions (delegates)[41]
Co- and Contra-variance for delegates[41]
Static classes[41]
Delegate inference[41]


C# 3.0


Implicitly typed local variables[42]
Object and collection initializers[42]
Auto-Implemented properties[42]
Anonymous types[42]
Extension methods[42]
Query expressions[42]
Lambda expression[42]
Expression trees[42]
Partial methods[43]


C# 4.0


Dynamic binding[44]
Named and optional arguments[44]
Generic co- and contravariance[44]
Embedded interop types ("NoPIA")[44]


C# 5.0[45]


Asynchronous methods[46]
Caller info attributes[46]


C# 6.0


Compiler-as-a-service (Roslyn)
Import of static type members into namespace[47]
Exception filters[47]
Await in catch/finally blocks[47]
Auto property initializers[47]
Default values for getter-only properties[47]
Expression-bodied members[47]
Null propagator (null-conditional operator, succinct null checking)[47]
String interpolation[47]
nameof operator[47]
Dictionary initializer[47]


C# 7.0[48][49]


Out variables
Pattern matching
Tuples
Deconstruction
Local functions
Digit separators
Binary literals
Ref returns and locals
Generalized async return types
Expression bodied constructors and finalizers
Expression bodied getters and setters
Throw can also be used as expression


C# 7.1[50]


Async main
Default literal expressions
Inferred tuple element names


C# 7.2[51]


Reference semantics with value types
Non-trailing named arguments
Leading underscores in numeric literals
private protected access modifier

Syntax[edit]
Main article: C Sharp syntax
See also: Syntax (programming languages)
The core syntax of C# language is similar to that of other C-style languages such as C, C++ and Java. In particular:

Semicolons are used to denote the end of a statement.
Curly brackets are used to group statements. Statements are commonly grouped into methods (functions), methods into classes, and classes into namespaces.
Variables are assigned using an equals sign, but compared using two consecutive equals signs.
Square brackets are used with arrays, both to declare them and to get a value at a given index in one of them.

Distinguishing features[edit]
See also: Comparison of C Sharp and Java
Some notable features of C# that distinguish it from C, C++, and Java where noted, are:
Portability[edit]
By design, C# is the programming language that most directly reflects the underlying Common Language Infrastructure (CLI).[52] Most of its intrinsic types correspond to value-types implemented by the CLI framework. However, the language specification does not state the code generation requirements of the compiler: that is, it does not state that a C# compiler must target a Common Language Runtime, or generate Common Intermediate Language (CIL), or generate any other specific format. Theoretically, a C# compiler could generate machine code like traditional compilers of C++ or Fortran.
Typing[edit]
C# supports strongly typed implicit variable declarations with the keyword var, and implicitly typed arrays with the keyword new[] followed by a collection initializer.
C# supports a strict Boolean data type, bool. Statements that take conditions, such as while and if, require an expression of a type that implements the true operator, such as the Boolean type. While C++ also has a Boolean type, it can be freely converted to and from integers, and expressions such as if(a) require only that a is convertible to bool, allowing a to be an int, or a pointer. C# disallows this "integer meaning true or false" approach, on the grounds that forcing programmers to use expressions that return exactly bool can prevent certain types of programming mistakes such as if (a = b) (use of assignment = instead of equality ==, which while not an error in C or C++, will be caught by the compiler anyway).
C# is more type safe than C++. The only implicit conversions by default are those that are considered safe, such as widening of integers. This is enforced at compile-time, during JIT, and, in some cases, at runtime. No implicit conversions occur between Booleans and integers, nor between enumeration members and integers (except for literal 0, which can be implicitly converted to any enumerated type). Any user-defined conversion must be explicitly marked as explicit or implicit, unlike C++ copy constructors and conversion operators, which are both implicit by default.
C# has explicit support for covariance and contravariance in generic types, unlike C++ which has some degree of support for contravariance simply through the semantics of return types on virtual methods.
Enumeration members are placed in their own scope.
The C# language does not allow for global variables or functions. All methods and members must be declared within classes. Static members of public classes can substitute for global variables and functions.
Local variables cannot shadow variables of the enclosing block, unlike C and C++.
Metaprogramming[edit]
Metaprogramming via C# attributes is part of the language. Many of these attributes duplicate the functionality of GCC's and VisualC++'s platform-dependent preprocessor directives.
Methods and functions[edit]
Methods in programming language are the members of a class in a project, some methods have signatures and some don't have signatures. Methods can be void or can return something like string, integer, double, decimal, float and bool. If a method is void it means that the method does not return any data type.
Like C++, and unlike Java, C# programmers must use the keyword virtual to allow methods to be overridden by subclasses.
Extension methods in C# allow programmers to use static methods as if they were methods from a class's method table, allowing programmers to add methods to an object that they feel should exist on that object and its derivatives.
The type dynamic allows for run-time method binding, allowing for JavaScript-like method calls and run-time object composition.
C# has support for strongly-typed function pointers via the keyword delegate. Like the Qt framework's pseudo-C++ signal and slot, C# has semantics specifically surrounding publish-subscribe style events, though C# uses delegates to do so.
C# offers Java-like synchronized method calls, via the attribute [MethodImpl(MethodImplOptions.Synchronized)], and has support for mutually-exclusive locks via the keyword lock.
Property[edit]
C# provides properties as syntactic sugar for a common pattern in which a pair of methods, accessor (getter) and mutator (setter) encapsulate operations on a single attribute of a class. No redundant method signatures for the getter/setter implementations need be written, and the property may be accessed using attribute syntax rather than more verbose method calls.
Namespace[edit]
A C# namespace provides the same level of code isolation as a Java package or a C++ namespace, with very similar rules and features to a package.
Memory access[edit]
In C#, memory address pointers can only be used within blocks specifically marked as unsafe, and programs with unsafe code need appropriate permissions to run. Most object access is done through safe object references, which always either point to a "live" object or have the well-defined null value; it is impossible to obtain a reference to a "dead" object (one that has been garbage collected), or to a random block of memory. An unsafe pointer can point to an instance of a value-type, array, string, or a block of memory allocated on a stack. Code that is not marked as unsafe can still store and manipulate pointers through the System.IntPtr type, but it cannot dereference them.
Managed memory cannot be explicitly freed; instead, it is automatically garbage collected. Garbage collection addresses the problem of memory leaks by freeing the programmer of responsibility for releasing memory that is no longer needed.
Exception[edit]
Checked exceptions are not present in C# (in contrast to Java). This has been a conscious decision based on the issues of scalability and versionability.[53]
Polymorphism[edit]
Unlike C++, C# does not support multiple inheritance, although a class can implement any number of interfaces. This was a design decision by the language's lead architect to avoid complication and simplify architectural requirements throughout CLI. When implementing multiple interfaces that contain a method with the same signature, C# allows implementing each method depending on which interface that method is being called through, or, like Java, allows implementing the method once, and have that be the one invocation on a call through any of the class's interfaces.
However, unlike Java, C# supports operator overloading. Only the most commonly overloaded operators in C++ may be overloaded in C#.
Language Integrated Query - LINQ[edit]
C# has the ability to utilize LINQ through the Microsoft.NET Framework with the IEnumerable Interface a developer can query any .NET collection class, XML documents, ADO.NET datasets, and SQL databases.[54] There are some advantages to using LINQ in C# and they are as follows: intellisense support, strong filtering capabilities, type safety with compile error checking ability, and brings consistency for querying data over a variety of sources.[55] There are several different language structures that can be utilized with C# with LINQ and they are query expressions, lambda expressions, anonymous types, implicitly typed variables, extension methods, and object initializers. [56]
Functional programming[edit]
Though primarily an imperative language, C# 2.0 offered limited support for functional programming through first-class functions and closures in the form of anonymous delegates. C# 3.0 expanded support for functional programming with the introduction of a lightweight syntax for lambda expressions, extension methods (an affordance for modules), and a list comprehension syntax in the form of a "query comprehension" language.
Common type system[edit]
C# has a unified type system. This unified type system is called Common Type System (CTS).[57]
A unified type system implies that all types, including primitives such as integers, are subclasses of the System.Object class. For example, every type inherits a ToString() method.
Categories of data types[edit]
CTS separates data types into two categories:[57]

Reference types
Value types

Instances of value types do not have referential identity nor referential comparison semantics - equality and inequality comparisons for value types compare the actual data values within the instances, unless the corresponding operators are overloaded. Value types are derived from System.ValueType, always have a default value, and can always be created and copied. Some other limitations on value types are that they cannot derive from each other (but can implement interfaces) and cannot have an explicit default (parameterless) constructor. Examples of value types are all primitive types, such as int (a signed 32-bit integer), float (a 32-bit IEEE floating-point number), char (a 16-bit Unicode code unit), and System.DateTime (identifies a specific point in time with nanosecond precision). Other examples are enum (enumerations) and struct (user defined structures).
In contrast, reference types have the notion of referential identity - each instance of a reference type is inherently distinct from every other instance, even if the data within both instances is the same. This is reflected in default equality and inequality comparisons for reference types, which test for referential rather than structural equality, unless the corresponding operators are overloaded (such as the case for System.String). In general, it is not always possible to create an instance of a reference type, nor to copy an existing instance, or perform a value comparison on two existing instances, though specific reference types can provide such services by exposing a public constructor or implementing a corresponding interface (such as ICloneable or IComparable). Examples of reference types are object (the ultimate base class for all other C# classes), System.String (a string of Unicode characters), and System.Array (a base class for all C# arrays).
Both type categories are extensible with user-defined types.
Boxing and unboxing[edit]
Boxing is the operation of converting a value-type object into a value of a corresponding reference type.[57] Boxing in C# is implicit.
Unboxing is the operation of converting a value of a reference type (previously boxed) into a value of a value type.[57] Unboxing in C# requires an explicit type cast. A boxed object of type T can only be unboxed to a T (or a nullable T).[58]
Example:


int foo = 42;         // Value type.
object bar = foo;     // foo is boxed to bar.
int foo2 = (int)bar;  // Unboxed back to value type.

Libraries[edit]
The C# specification details a minimum set of types and class libraries that the compiler expects to have available. In practice, C# is most often used with some implementation of the Common Language Infrastructure (CLI), which is standardized as ECMA-335 Common Language Infrastructure (CLI).
Examples[edit]
The following is a very simple C# program, a version of the classic "Hello world" example:


using System;

class Program
{
    static void Main(string[] args)
    {
        Console.WriteLine("Hello, world!");
    }
}

What will display on the program is:

Hello, world!

Each line has a purpose:


using System;

The above line of code tells the compiler to use System as a candidate prefix for types used in the source code. In this case, when the compiler sees use of the Console type later in the source code, it tries to find a type named Console, first in the current assembly, followed by all referenced assemblies. In this case the compiler fails to find such a type, since the name of the type is actually System.Console. The compiler then attempts to find a type named System.Console by using the System prefix from the using statement, and this time it succeeds. The using statement allows the programmer to state all candidate prefixes to use during compilation instead of always using full type names.


class Program

Above is a class definition. Everything between the following pair of braces describes Program.


static void Main(string[] args)

This declares the class member method where the program begins execution. The .NET runtime calls the Main method. (Note: Main may also be called from elsewhere, like any other method, e.g. from another method of Program.) The static keyword makes the method accessible without an instance of Program. Each console application's Main entry point must be declared static. Otherwise, the program would require an instance, but any instance would require a program. To avoid that irresolvable circular dependency, C# compilers processing console applications (like that above) report an error, if there is no static Main method. The void keyword declares that Main has no return value.


Console.WriteLine("Hello, world!");

This line writes the output. Console is a static class in the System namespace. It provides an interface to the standard input, output, and error streams for console applications. The program calls the Console method WriteLine, which displays on the console a line with the argument, the string "Hello, world!".
A GUI example:


using System.Windows.Forms;

class Program
{
    static void Main(string[] args)
    {
        MessageBox.Show("Hello, World!");
        System.Console.WriteLine("Is almost the same argument!");
    }
}

This example is similar to the previous example, except that it generates a dialog box that contains the message "Hello, World!" instead of writing it to the console.
Standardization and licensing[edit]
In August 2001, Microsoft Corporation, Hewlett-Packard and Intel Corporation co-sponsored the submission of specifications for C# as well as the Common Language Infrastructure (CLI) to the standards organization Ecma International. In December 2001, ECMA released ECMA-334 C# Language Specification. C# became an ISO standard in 2003 (ISO/IEC 23270:2003 - Information technology — Programming languages — C#). ECMA had previously adopted equivalent specifications as the 2nd edition of C#, in December 2002.
In June 2005, ECMA approved edition 3 of the C# specification, and updated ECMA-334. Additions included partial classes, anonymous methods, nullable types, and generics (somewhat similar to C++ templates).
In July 2005, ECMA submitted to ISO/IEC JTC 1, via the latter's Fast-Track process, the standards and related TRs. This process usually takes 6–9 months.
The C# language definition and the CLI are standardized under ISO and Ecma standards that provide reasonable and non-discriminatory licensing protection from patent claims.
Microsoft has agreed not to sue open source developers for violating patents in non-profit projects for the part of the framework that is covered by the OSP.[59] Microsoft has also agreed not to enforce patents relating to Novell products against Novell's paying customers[60] with the exception of a list of products that do not explicitly mention C#, .NET or Novell's implementation of .NET (The Mono Project).[61] However, Novell maintains that Mono does not infringe any Microsoft patents.[62] Microsoft has also made a specific agreement not to enforce patent rights related to the Moonlight browser plugin, which depends on Mono, provided it is obtained through Novell.[63]
Implementations[edit]
Microsoft is leading the development of the open-source reference C# compiler and set of tools, previously codenamed "Roslyn". The compiler, which is entirely written in managed code (C#), has been opened up and functionality surfaced as APIs. It is thus enabling developers to create refactoring and diagnostics tools.[64][65] While other implementations of C# exist, Visual C# is by far the one most commonly used.[66] The Unity game engine uses C# as its primary scripting language.
Other C# compilers, which often including an implementation of the Common Language Infrastructure and the .NET class libraries up to .NET 2.0:

The Mono project provides an open-source C# compiler, a complete open-source implementation of the Common Language Infrastructure including the required framework libraries as they appear in the ECMA specification, and a nearly complete implementation of the Microsoft proprietary .NET class libraries up to .NET 3.5. As of Mono 2.6, no plans exist to implement WPF; WF is planned for a later release; and there are only partial implementations of LINQ to SQL and WCF.[67]
The DotGNU project (now discontinued) also provided an open-source C# compiler, a nearly complete implementation of the Common Language Infrastructure including the required framework libraries as they appear in the ECMA specification, and subset of some of the remaining Microsoft proprietary .NET class libraries up to .NET 2.0 (those not documented or included in the ECMA specification, but included in Microsoft's standard .NET Framework distribution).
Microsoft's Shared Source Common Language Infrastructure, codenamed "Rotor", provides a shared source implementation of the CLR runtime and a C# compiler licensed for educational and research use only, and a subset of the required Common Language Infrastructure framework libraries in the ECMA specification (up to C# 2.0, and supported on Windows XP only).

See also[edit]





C# topics


C# syntax
Comparison of C# and Java
Comparison of C# and Visual Basic .NET
.NET standard libraries
List of .NET libraries and frameworks





Computer programming portal



IDEs


Microsoft Visual Studio
Microsoft Visual Studio Express
MonoDevelop
Morfik
SharpDevelop
Turbo C Sharp
Rider






Notes[edit]



^ for async
^ By convention, a number sign is used for the second character in normal text; in artistic representations, sometimes a true sharp sign is used: C♯. However the ECMA 334 standard states: "The name C# is written as the LATIN CAPITAL LETTER C (U+0043) followed by the NUMBER SIGN # (U+0023)."
^ The Microsoft C# 2.0 specification document only contains the new 2.0 features. For older features, use the 1.2 specification above.
^ a b c No ECMA or ISO/IEC specifications exist for C# 3.0, 4.0, 5.0, 6.0, or 7.0.



References[edit]


^ https://www.infoq.com/minibooks/emag-c-sharp-preview
^ "Welcome to C# 7.2". Microsoft Docs. Microsoft. Retrieved 2017-11-15. 
^ "Nullable Reference Types Preview". GitHub. Microsoft. Retrieved 2017-12-15. 
^ Torgersen, Mads (October 27, 2008). "New features in C# 4.0". Microsoft. Retrieved October 28, 2008. 
^ https://github.com/dotnet/coreclr/blob/master/LICENSE.TXT
^ a b Naugler, David (May 2007). "C# 2.0 for C++ and Java programmer: conference workshop". Journal of Computing Sciences in Colleges. 22 (5). Although C# has been strongly influenced by Java it has also been strongly influenced by C++ and is best viewed as a descendant of both C++ and Java. 
^ Hamilton, Naomi (October 1, 2008). "The A-Z of Programming Languages: C#". Computerworld. Retrieved February 12, 2010. We all stand on the shoulders of giants here and every language builds on what went before it so we owe a lot to C, C++, Java, Delphi, all of these other things that came before us. (Anders Hejlsberg) 
^ "Chapel spec (Acknowlegements)" (PDF). Cray Inc. 2015-10-01. Retrieved 2016-01-14. 
^ Borenszweig, Ary. "Crystal 0.18.0 released!". It's heavily inspired by Ruby, and other languages (like C#, Go and Python). 
^ "Web Languages and VMs: Fast Code is Always in Fashion. (V8, Dart) - Google I/O 2013". Google. Retrieved 22 December 2013. 
^ Java 5.0 added several new language features (the enhanced for loop, autoboxing, varargs and annotations), after they were introduced in the similar (and competing) C# language [1] [2]
^ Cornelius, Barry (December 1, 2005). "Java 5 catches up with C#". University of Oxford Computing Services. Retrieved June 18, 2014. In my opinion, it is C# that has caused these radical changes to the Java language. (Barry Cornelius) 
^ Ring Team (5 December 2017). "Ring programming language and other languages". ring-lang.net. ring-lang. 
^ Lattner, Chris (2014-06-03). "Chris Lattner's Homepage". Chris Lattner. Retrieved 2014-06-03. The Swift language is the product of tireless effort from a team of language experts, documentation gurus, compiler optimization ninjas, and an incredibly important internal dogfooding group who provided feedback to help refine and battle-test ideas. Of course, it also greatly benefited from the experiences hard-won by many other languages in the field, drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, CLU, and far too many others to list. 
^ a b c C# Language Specification (PDF) (4th ed.). Ecma International. June 2006. Retrieved January 26, 2012. 
^ "Welcome to C# 7.2". Microsoft Docs. Retrieved 15 November 2017. 
^ Zander, Jason (November 24, 2008). "Couple of Historical Facts". Retrieved February 23, 2009. 
^ Guthrie, Scott (November 28, 2006). "What language was ASP.Net originally written in?". Retrieved February 21, 2008. 
^ Hamilton, Naomi (October 1, 2008). "The A-Z of Programming Languages: C#". Computerworld. Retrieved October 1, 2008. 
^ Wylie Wong (2002). "Why Microsoft's C# isn't". CNET: CBS Interactive. Retrieved May 28, 2014. 
^ Bill Joy (February 7, 2002). "Microsoft's blind spot". cnet.com. Retrieved January 12, 2010. 
^ Klaus Kreft and Angelika Langer (2003). "After Java and C# - what is next?". Retrieved June 18, 2013. 
^ Klaus Kreft and Angelika Langer (July 3, 2003). "After Java and C# - what is next?". artima.com. Retrieved January 12, 2010. 
^ Osborn, John (August 1, 2000). "Deep Inside C#: An Interview with Microsoft Chief Architect Anders Hejlsberg". O'Reilly Media. Retrieved November 14, 2009 
^ "Generics (C# Programming Guide)". Microsoft. Retrieved March 21, 2011. 
^ Don Box and Anders Hejlsberg (February 2007). "LINQ: .NET Language-Integrated Query". Microsoft. Retrieved March 21, 2011. 
^ Mercer, Ian (April 15, 2010). "Why functional programming and LINQ is often better than procedural code". abodit.com. Retrieved March 21, 2011. 
^ "Andy Retires". Dan Fernandez's Blog. Blogs.msdn.com. January 29, 2004. Retrieved October 4, 2012. 
^ "Technical committees - JTC 1/SC 22 - Programming languages, their environments and system software interfaces". ISO. Retrieved October 4, 2012. 
^ "ISO/IEC 23270:2003 - Information technology - C# Language Specification". Iso.org. August 23, 2006. Retrieved October 4, 2012. 
^ "ISO/IEC 23270:2006 - Information technology - Programming languages - C#". Iso.org. January 26, 2012. Retrieved October 4, 2012. 
^ Kovacs, James (September 7, 2007). "C#/.NET History Lesson". Retrieved June 18, 2009. 
^ Hejlsberg, Anders (October 1, 2008). "The A-Z of Programming Languages: C#". Computerworld. 
^ "Microsoft C# FAQ". Microsoft. Archived from the original on February 14, 2006. Retrieved March 25, 2008. 
^ "Visual C#.net Standard" (JPEG). Microsoft. September 4, 2003. Retrieved June 18, 2009. 
^ "F# FAQ". Microsoft Research. Archived from the original on February 18, 2009. Retrieved June 18, 2009. 
^ Simon, Raphael; Stapf, Emmanuel; Meyer, Bertrand (June 2002). "Full Eiffel on the .NET Framework". Microsoft. Retrieved June 18, 2009. 
^ a b "Using C# 3.0 from .NET 2.0". Danielmoth.com. May 13, 2007. Retrieved October 4, 2012. 
^ https://www.visualstudio.com/en-us/news/releasenotes/vs2017-relnotes-v15.3#cs71
^ https://www.visualstudio.com/en-us/news/releasenotes/vs2017-relnotes
^ a b c d e f g h i j "What's new in the C# 2.0 Language and Compiler". Microsoft Developer Network. Microsoft. Retrieved 11 June 2014. 
^ a b c d e f g h Hejlsberg, Anders; Torgersen, Mads. "Overview of C# 3.0". Microsoft Developer Network. Microsoft. Retrieved 11 June 2014. 
^ Ghosh, Wriju. "C# 3.0 : Partial * Garbage Collection Methods". MSDN Blogs. Microsoft. Retrieved 11 June 2014. 
^ a b c d Burrows, Chris. "C# 4.0 - New C# Features in the .NET Framework 4". Microsoft Developer Network. Microsoft. Retrieved 11 June 2014. 
^ Hejlsberg, Anders. "Future directions for C# and Visual Basic". C# lead architect. Microsoft. Retrieved September 21, 2011. 
^ a b "An Introduction to New Features in C# 5.0". MSDN Blogs. Microsoft. Retrieved 11 June 2014. 
^ a b c d e f g h i j "Language feature implementation status". github. Microsoft. Retrieved 13 February 2015. 
^ "What's new in C# 7". Microsoft Docs. 2016-12-21. 
^ "New Features in C# 7.0". .NET Blog. Retrieved 2017-06-09. 
^ "What's new in C# 7.1". Microsoft Docs. Retrieved 2017-10-09. 
^ "What's new in C# 7.2". Microsoft Docs. Retrieved 2017-11-26. 
^ Visual Studio 2010 and .NET 4 Six-in-One. Wrox Press. 2010. ISBN 0470499486. 
^ Venners, Bill; Eckel, Bruce (August 18, 2003). "The Trouble with Checked Exceptions". Retrieved March 30, 2010. 
^ X. D. Zhang et al., "Research of the Database Access Technology Under.NET Framework", Applied Mechanics and Materials, Vols. 644-650, pp. 3077-3080, 2014
^ Otey, M. (2006, 02). LINQ to the future. SQL Server Magazine, 8, 17-21. Retrieved from http://ezaccess.libraries.psu.edu/login?url=https://search-proquest-com.ezaccess.libraries.psu.edu/docview/214859896?accountid=13158
^ Sheldon, W. (2010, 11). New features in LINQ. SQL Server Magazine, 12, 37-40. Retrieved from http://ezaccess.libraries.psu.edu/login?url=https://search-proquest-com.ezaccess.libraries.psu.edu/docview/770609095?accountid=13158
^ a b c d Archer, Tom (2001). "Part 2, Chapter 4: The Type System". Inside C#. Redmond, Washington: Microsoft Press. ISBN 0-7356-1288-9. 
^ Lippert, Eric (March 19, 2009). "Representation and Identity". Fabulous Adventures In Coding. Blogs.msdn.com. Retrieved October 4, 2012. 
^ "Patent Pledge for Open Source Developers". 
^ "Patent Cooperation Agreement - Microsoft & Novell Interoperability Collaboration". Microsoft. November 2, 2006. Retrieved July 5, 2009. Microsoft, on behalf of itself and its Subsidiaries (collectively "Microsoft"), hereby covenants not to sue Novell's Customers and Novell's Subsidiaries' Customers for infringement under Covered Patents of Microsoft on account of such a Customer's use of specific copies of a Covered Product as distributed by Novell or its Subsidiaries (collectively "Novell") for which Novell has received Revenue (directly or indirectly) for such specific copies; provided the foregoing covenant is limited to use by such Customer (i) of such specific copies that are authorized by Novell in consideration for such Revenue, and (ii) within the scope authorized by Novell in consideration for such Revenue. 
^ "Definitions". Microsoft. November 2, 2006. Retrieved July 5, 2009. 
^ Steinman, Justin (November 7, 2006). "Novell Answers Questions from the Community". Retrieved July 5, 2009. We maintain that Mono does not infringe any Microsoft patents. 
^ "Covenant to Downstream Recipients of Moonlight - Microsoft & Novell Interoperability Collaboration". Microsoft. September 28, 2007. Retrieved March 8, 2008. "Downstream Recipient" means an entity or individual that uses for its intended purpose a Moonlight Implementation obtained directly from Novell or through an Intermediate Recipient... Microsoft reserves the right to update (including discontinue) the foregoing covenant... "Moonlight Implementation" means only those specific portions of Moonlight 1.0 or Moonlight 1.1 that run only as a plug-in to a browser on a Personal Computer and are not licensed under GPLv3 or a Similar License. 
^ https://github.com/dotnet/roslyn
^ https://docs.microsoft.com/en-us/dotnet/articles/csharp/csharp
^ Watson, K et al., (2010). Beginning Visual C# 2010. Indianapolis, Indiana: Wiley.
^ "Compatibility - Mono". Mono-project.com. December 19, 2011. Retrieved October 4, 2012. 


Further reading[edit]

Drayton, Peter; Albahari, Ben; Neward, Ted (2002). C# Language Pocket Reference. O'Reilly. ISBN 0-596-00429-X. 
Petzold, Charles (2002). Programming Microsoft Windows with C#. Microsoft Press. ISBN 0-7356-1370-2. 

External links[edit]



Wikibooks has a book on the topic of: C Sharp Programming



C# Language Specification (from MSDN)
C# Programming Guide (MSDN)
Microsoft Visual Studio
ISO C# Language Specification.
C# 6 Features And Online C# Compiler
C# Interactive tutorial for complete beginners (online)
C# Compiler Platform ("Roslyn") source code
List of Key features introduced in #CSharp (1.0 to 6.0) - an Infographic







v
t
e


Common Language Infrastructure



Architecture



Application domain
Code Access Security
Common Intermediate Language (CIL)

CIL instructions


Common Type System (CTS)
Platform Invocation Services (P/Invoke)
Virtual Execution System (VES)





Components



Assembly
Delegate
Global Assembly Cache (GAC)
Manifest
Metadata





Standard
Libraries




Kernel Profile



Base Class Library (BCL)
Runtime Infrastructure Library





Compact Profile



Network Library
Reflection Library
XML Library








Extended Array Library
Extended Numerics Library
Parallel Library
Vararg Library








Implementations




Microsoft



.NET Framework
.NET Compact Framework
.NET Micro Framework
Shared Source Common Language Infrastructure





Other



.NET Core
Mono
Portable.NET








Languages




Microsoft



C#
Visual Basic .NET
C++/CLI

Managed


F#
Q#
J#
JScript .NET
PowerShell





Other



Axum
A#
Boo
Cobra
IronScheme

IronLisp


IronPython
IronRuby
Nemerle
Oxygene
Phalanger
P#
Scala





Comparison



C# and Java
C# and Visual Basic .NET
Java and .NET platforms
Visual Basic and Visual Basic .NET








Organizations



.NET Foundation
DotGNU
Microsoft
Xamarin












v
t
e


Standards of Ecma International



Application interfaces



ANSI escape code
Common Language Infrastructure
Office Open XML
OpenXPS





File systems (tape)



Advanced Intelligent Tape
DDS
DLT
Super DLT
Holographic Versatile Disc
Linear Tape-Open (Ultrium-1)
VXA





File systems (disk)



CD-ROM
CD File System (CDFS)
FAT

FAT12
FAT16
FAT16B


FD
UDF
Ultra Density Optical
Universal Media Disc





Graphics



Universal 3D





Programming languages



C++/CLI
C#
Eiffel
JavaScript (E4X, ECMAScript)





Radio link interfaces



NFC
UWB





Other



ECMA-35






List of Ecma standards (1961 - Present)










v
t
e


ISO standards by standard number




List of ISO standards / ISO romanizations / IEC standards



1–9999



1
2
3
4
5
6
7
9
16
31

-0
-1
-2
-3
-4
-5
-6
-7
-8
-9
-10
-11
-12
-13


128
216
217
226
228
233
259
269
302
306
428
518
519
639

-1
-2
-3
-5
-6


646
690
732
764
843
898
965
1000
1004
1007
1073-1
1413
1538
1745
1989
2014
2015
2022
2047
2108
2145
2146
2240
2281
2709
2711
2788
2848
2852
3029
3103
3166

-1
-2
-3


3297
3307
3602
3864
3901
3977
4031
4157
4217
4909
5218
5428
5775
5776
5800
5964
6166
6344
6346
6385
6425
6429
6438
6523
6709
7001
7002
7098
7185
7200
7498
7736
7810
7811
7812
7813
7816
8000
8178
8217
8571
8583
8601
8632
8652
8691
8807
8820-5
8859

-1
-2
-3
-4
-5
-6
-7
-8
-8-I
-9
-10
-11
-12
-13
-14
-15
-16


8879
9000/9001
9075
9126
9293
9241
9362
9407
9506
9529
9564
9594
9660
9897
9899
9945
9984
9985
9995





10000–19999



10005
10006
10007
10116
10118-3
10160
10161
10165
10179
10206
10218
10303

-11
-21
-22
-28
-238


10383
10487
10585
10589
10646
10664
10746
10861
10957
10962
10967
11073
11170
11179
11404
11544
11783
11784
11785
11801
11898
11940 (-2)
11941
11941 (TR)
11992
12006
12182
12207
12234-2
13211

-1
-2


13216
13250
13399
13406-2
13450
13485
13490
13567
13568
13584
13616
14000
14031
14224
14289
14396
14443
14496

-2
-3
-6
-10
-11
-12
-14
-17
-20


14644
14649
14651
14698
14750
14764
14882
14971
15022
15189
15288
15291
15292
15398
15408
15444

-3


15445
15438
15504
15511
15686
15693
15706

-2


15707
15897
15919
15924
15926
15926 WIP
15930
16023
16262
16612-2
16750
16949 (TS)
17024
17025
17100
17203
17369
17442
17799
18000
18004
18014
18245
18629
18916
19005
19011
19092 (-1
-2)
19114
19115
19125
19136
19439
19500
19501
19502
19503
19505
19506
19507
19508
19509
19510
19600
19752
19757
19770
19775-1
19794-5
19831





20000+



20000
20022
20121
20400
21000
21047
21500
21827:2002
22000
23270
23271
23360
24517
24613
24617
24707
25178
25964
26000
26300
26324
27000 series
27000
27001
27002
27006
27729
28000
29110
29148
29199-2
29500
30170
31000
32000
38500
40500
42010
55000
80000

-1
-2
-3










 Category












v
t
e


Programming languages






Comparison
Timeline
History








APL
Assembly
BASIC
C
C++
C#
COBOL
Fortran
Go
Groovy
Haskell
Java
JavaScript (JS)
Lisp
Lua
Objective-C
Pascal
Perl
PHP
Python
Ruby
Shell
Smalltalk
Swift
Visual Basic .NET (VB.NET)
more...








 Category
 Lists

Alphabetical
Categorical
Generational
Non-English-based














v
t
e


List of International Electrotechnical Commission standards



IEC standards



IEC 60027
IEC 60034
IEC 60038
IEC 60062
IEC 60063
IEC 60068
IEC 60112
IEC 60228
IEC 60269
IEC 60297
IEC 60309
IEC 60320
IEC 60364
IEC 60446
IEC 60559
IEC 60601
IEC 60870

IEC 60870-5
IEC 60870-6


IEC 60906-1
IEC 60908
IEC 60929
IEC 60958

AES3
S/PDIF


IEC 61030
IEC 61131

IEC 61131-3


IEC 61158
IEC 61162
IEC 61334
IEC 61346
IEC 61355
IEC 61400
IEC 61499
IEC 61508
IEC 61511
IEC 61850
IEC 61851
IEC 61883
IEC 61960
IEC 61968
IEC 61970
IEC 62014-4
IEC 62056
IEC 62061
IEC 62196
IEC 62262
IEC 62264
IEC 62304
IEC 62325
IEC 62351
IEC 62365
IEC 62366
IEC 62379
IEC 62386
IEC 62455
IEC 62680
IEC 62682
IEC 62700





ISO/IEC standards



ISO/IEC 646
ISO/IEC 2022
ISO/IEC 4909
ISO/IEC 5218
ISO/IEC 6429
ISO/IEC 6523
ISO/IEC 7810
ISO/IEC 7811
ISO/IEC 7812
ISO/IEC 7813
ISO/IEC 7816
ISO/IEC 7942
ISO/IEC 8613
ISO/IEC 8632
ISO/IEC 8652
ISO/IEC 8859
ISO/IEC 9126
ISO/IEC 9293
ISO/IEC 9592
ISO/IEC 9593
ISO/IEC 9899
ISO/IEC 9945
ISO/IEC 9995
ISO/IEC 10021
ISO/IEC 10116
ISO/IEC 10165
ISO/IEC 10179
ISO/IEC 10646
ISO/IEC 10967
ISO/IEC 11172
ISO/IEC 11179
ISO/IEC 11404
ISO/IEC 11544
ISO/IEC 11801
ISO/IEC 12207
ISO/IEC 13250
ISO/IEC 13346
ISO/IEC 13522-5
ISO/IEC 13568
ISO/IEC 13818
ISO/IEC 14443
ISO/IEC 14496
ISO/IEC 14882
ISO/IEC 15288
ISO/IEC 15291
ISO/IEC 15408
ISO/IEC 15444
ISO/IEC 15445
ISO/IEC 15504
ISO/IEC 15511
ISO/IEC 15693
ISO/IEC 15897
ISO/IEC 15938
ISO/IEC 16262
ISO/IEC 17024
ISO/IEC 17025
ISO/IEC 18000
ISO/IEC 18004
ISO/IEC 18014
ISO/IEC 19752
ISO/IEC 19757
ISO/IEC 19770
ISO/IEC 19788
ISO/IEC 20000
ISO/IEC 21000
ISO/IEC 21827
ISO/IEC 23000
ISO/IEC 23003
ISO/IEC 23008
ISO/IEC 23270
ISO/IEC 23360
ISO/IEC 24707
ISO/IEC 24727
ISO/IEC 24744
ISO/IEC 24752
ISO/IEC 26300
ISO/IEC 27000
ISO/IEC 27000-series
ISO/IEC 27002
ISO/IEC 27040
ISO/IEC 29119
ISO/IEC 33001
ISO/IEC 38500
ISO/IEC 42010
ISO/IEC 80000





Related



International Electrotechnical Commission










Authority control



LCCN: sh2001001705
GND: 4616843-6
BNF: cb13614817q (data)
NKC: ph137696












					
						Retrieved from "https://en.wikipedia.org/w/index.php?title=C_Sharp_(programming_language)&oldid=833278529"					
				Categories: American inventionsProgramming languagesC Sharp programming language family.NET programming languagesClass-based programming languagesEcma standardsFunctional languagesIEC standardsISO standardsProgramming languages created in 2000Programming languages with an ISO standardStatically typed programming languages2000 softwareHigh-level programming languagesHidden categories: Articles with inconsistent citation formatsUse mdy dates from October 2012Use British English Oxford spelling from December 2011Pages using deprecated image syntaxAll articles with unsourced statementsArticles with unsourced statements from February 2010Articles with example C Sharp codeWikipedia articles with LCCN identifiersWikipedia articles with GND identifiersWikipedia articles with BNF identifiers				
							
		
		
			Navigation menu
			
									
						Personal tools
						
							Not logged inTalkContributionsCreate accountLog in						
					
									
										
						Namespaces
						
							ArticleTalk						
					
										
												
						
							Variants
						
						
							
															
						
					
									
				
										
						Views
						
							ReadEditView history						
					
										
						
						More
						
							
															
						
					
										
						
							Search
						
						
							
															
						
					
									
			
			
				
						
			Navigation
			
								
					Main pageContentsFeatured contentCurrent eventsRandom articleDonate to WikipediaWikipedia store				
							
		
			
			Interaction
			
								
					HelpAbout WikipediaCommunity portalRecent changesContact page				
							
		
			
			Tools
			
								
					What links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationWikidata itemCite this page				
							
		
			
			Print/export
			
								
					Create a bookDownload as PDFPrintable version				
							
		
			
			In other projects
			
								
					Wikimedia CommonsWikibooksWikiversity				
							
		
			
			Languages
			
								
					العربيةAzərbaycancaবাংলাBân-lâm-gúБеларускаяБеларуская (тарашкевіца)‎БългарскиBosanskiCatalàČeštinaDanskDeutschEestiΕλληνικάEspañolEsperantoEuskaraفارسیFrançaisGalegoગુજરાતી客家語/Hak-kâ-ngî한국어Հայերենहिन्दीHrvatskiBahasa IndonesiaÍslenskaItalianoעבריתქართულიҚазақшаLatviešuLietuviųMagyarМакедонскиമലയാളംBahasa MelayuMìng-dĕ̤ng-ngṳ̄မြန်မာဘာသာNederlandsनेपाल भाषा日本語NorskNorsk nynorskOʻzbekcha/ўзбекчаپنجابیភាសាខ្មែរPlattdüütschPolskiPortuguêsRomânăРусскийСаха тылаScotsShqipSimple EnglishSlovenčinaSlovenščinaکوردیСрпски / srpskiSrpskohrvatski / српскохрватскиSuomiSvenskaதமிழ்TaqbaylitไทยТоҷикӣTürkçeУкраїнськаTiếng ViệtWinarayYorùbá粵語中文				
				Edit links			
		
				
		
				
						
								 This page was last edited on 30 March 2018, at 16:46.
								Text is available under the Creative Commons Attribution-ShareAlike License;
additional terms may apply.  By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.
							
						
								Privacy policy
								About Wikipedia
								Disclaimers
								Contact Wikipedia
								Developers
								Cookie statement
								Mobile view
							
										
										
											
										
											
									
						
		
		(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.792","walltime":"0.945","ppvisitednodes":{"value":6406,"limit":1000000},"ppgeneratednodes":{"value":0,"limit":1500000},"postexpandincludesize":{"value":232635,"limit":2097152},"templateargumentsize":{"value":9660,"limit":2097152},"expansiondepth":{"value":25,"limit":40},"expensivefunctioncount":{"value":5,"limit":500},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":80092,"limit":5000000},"entityaccesscount":{"value":1,"limit":400},"timingprofile":["100.00%  734.483      1 -total"," 44.52%  327.009      2 Template:Reflist"," 30.31%  222.634     51 Template:Cite_web"," 13.75%  100.966      2 Template:Infobox"," 11.21%   82.310      1 Template:Infobox_programming_language","  6.35%   46.647      8 Template:Navbox","  5.47%   40.177      2 Template:Unichar","  5.15%   37.827      2 Template:Unichar/main","  4.61%   33.896      1 Template:Citation_needed","  4.32%   31.693      1 Template:Fix"]},"scribunto":{"limitreport-timeusage":{"value":"0.319","limit":"10.000"},"limitreport-memusage":{"value":6644394,"limit":52428800}},"cachereport":{"origin":"mw1268","timestamp":"20180402011345","ttl":86400,"transientcontent":true}}});});(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgBackendResponseTime":79,"wgHostname":"mw1321"});});
	

