



Java (programming language) - Wikipedia
document.documentElement.className = document.documentElement.className.replace( /(^|\s)client-nojs(\s|$)/, "$1client-js$2" );
(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Java_(programming_language)","wgTitle":"Java (programming language)","wgCurRevisionId":832483006,"wgRevisionId":832483006,"wgArticleId":15881,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["CS1 maint: BOT: original-url status unknown","Use mdy dates from August 2017","Wikipedia semi-protected pages","Pages using deprecated image syntax","Articles containing potentially dated statements from March 2018","All articles containing potentially dated statements","Articles with example Java code","Articles needing cleanup from January 2012","All pages needing cleanup","Articles containing how-to sections","Articles needing additional references from December 2014","All articles needing additional references","All articles with vague or ambiguous time","Vague or ambiguous time from December 2014","Articles with specifically marked weasel-worded phrases from September 2015","Wikipedia articles that may have off-topic paragraphs","Wikipedia articles with LCCN identifiers","Wikipedia articles with GND identifiers","Wikipedia articles with BNF identifiers","Java (programming language)","Java platform","C programming language family","Class-based programming languages","Computer-related introductions in 1995","Concurrent programming languages","Java specification requests","JVM programming languages","Object-oriented programming languages","Programming languages","Programming languages created in 1995","Statically typed programming languages","Sun Microsystems"],"wgBreakFrames":false,"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgMonthNamesShort":["","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"wgRelevantPageName":"Java_(programming_language)","wgRelevantArticleId":15881,"wgRequestId":"WsGDjgpAICkAAFffzFIAAABS","wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":["autoconfirmed"],"wgRestrictionMove":["autoconfirmed"],"wgFlaggedRevsParams":{"tags":{}},"wgStableRevisionId":null,"wgWikiEditorEnabledModules":[],"wgBetaFeaturesFeatures":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgPopupsShouldSendModuleToUser":true,"wgPopupsConflictsWithNavPopupGadget":false,"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en","usePageImages":true,"usePageDescriptions":true},"wgPreferredVariant":"en","wgMFExpandAllSectionsUserOption":true,"wgMFEnableFontChanger":true,"wgMFDisplayWikibaseDescriptions":{"search":true,"nearby":true,"watchlist":true,"tagline":false},"wgRelatedArticles":null,"wgRelatedArticlesUseCirrusSearch":true,"wgRelatedArticlesOnlyUseCirrusSearch":false,"wgULSCurrentAutonym":"English","wgNoticeProject":"wikipedia","wgCentralNoticeCookiesToDelete":[],"wgCentralNoticeCategoriesUsingLegacy":["Fundraising","fundraising"],"wgCategoryTreePageCategoryOptions":"{\"mode\":0,\"hideprefix\":20,\"showcount\":true,\"namespaces\":false}","wgWikibaseItemId":"Q251","wgScoreNoteLanguages":{"arabic":"العربية","catalan":"català","deutsch":"Deutsch","english":"English","espanol":"español","italiano":"italiano","nederlands":"Nederlands","norsk":"norsk","portugues":"português","suomi":"suomi","svenska":"svenska","vlaams":"West-Vlams"},"wgScoreDefaultNoteLanguage":"nederlands","wgCentralAuthMobileDomain":false,"wgCodeMirrorEnabled":false,"wgVisualEditorToolbarScrollOffset":0,"wgVisualEditorUnsupportedEditParams":["undo","undoafter","veswitched"],"wgEditSubmitButtonLabelPublish":true});mw.loader.state({"ext.gadget.charinsert-styles":"ready","ext.globalCssJs.user.styles":"ready","ext.globalCssJs.site.styles":"ready","site.styles":"ready","noscript":"ready","user.styles":"ready","user":"ready","user.options":"ready","user.tokens":"loading","ext.cite.styles":"ready","ext.pygments":"ready","wikibase.client.init":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.uls.interlanguage":"ready","ext.wikimediaBadges":"ready","mediawiki.legacy.shared":"ready","mediawiki.legacy.commonPrint":"ready","mediawiki.sectionAnchor":"ready","mediawiki.skinning.interface":"ready","skins.vector.styles":"ready","ext.globalCssJs.user":"ready","ext.globalCssJs.site":"ready"});mw.loader.implement("user.tokens@1dqfd7l",function($,jQuery,require,module){/*@nomin*/mw.user.tokens.set({"editToken":"+\\","patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});
});mw.loader.load(["ext.cite.a11y","site","mediawiki.page.startup","mediawiki.user","mediawiki.hidpi","mediawiki.page.ready","mediawiki.toc","mediawiki.searchSuggest","ext.gadget.teahouse","ext.gadget.ReferenceTooltips","ext.gadget.watchlist-notice","ext.gadget.DRN-wizard","ext.gadget.charinsert","ext.gadget.refToolbar","ext.gadget.extra-toolbar-buttons","ext.gadget.switcher","ext.centralauth.centralautologin","mmv.head","mmv.bootstrap.autostart","ext.popups","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","ext.eventLogging.subscriber","ext.wikimediaEvents","ext.navigationTiming","ext.uls.eventlogger","ext.uls.init","ext.uls.compactlinks","ext.uls.interface","ext.3d","ext.centralNotice.geoIP","ext.centralNotice.startUp","skins.vector.js"]);});





















		
		
		
			
			


Java (programming language)			
				From Wikipedia, the free encyclopedia				
								
					Jump to:					navigation, 					search
				
				"Java language" redirects here. For the natural language from the Indonesian island of Java, see Javanese language.
This article is about a programming language. For the software package downloaded from java.com, see Java SE.
Not to be confused with JavaScript.

Java




Paradigm
Multi-paradigm: Object-oriented (class-based), structured, imperative, generic, reflective, concurrent


Designed by
James Gosling


Developer
Sun Microsystems (now owned by Oracle Corporation)


First appeared
May 23, 1995; 22 years ago (1995-05-23)[1]


Typing discipline
Static, strong, safe, nominative, manifest


License
GNU General Public License, Java Community Process


Filename extensions
.java, .class, .jar


Website
oracle.com/java/


Major implementations



Compilers: OpenJDK (javac, sjavac), GNU Compiler for Java (GCJ), Eclipse Compiler for Java (ECJ)
Virtual Machines: Oracle HotSpot, Oracle JRockit, Azul Zing, IBM J9, Excelsior JET, Gluon VM, Microsoft JVM, Apache Harmony
JIT-Compilers: Oracle Graal, Azul Falcon (LLVM)


Dialects


Generic Java, Pizza


Influenced by


Ada 83, C++,[2] C#,[3] Eiffel,[4] Generic Java, Mesa,[5] Modula-3,[6] Oberon,[7] Objective-C,[8] UCSD Pascal,[9][10] Object Pascal[11]


Influenced


Ada 2005, BeanShell, C#, Chapel,[12] Clojure, ECMAScript, Fantom, Gambas,[13] Groovy, Hack,[14] Haxe, J#, JavaScript, Kotlin, PHP, Python, Scala, Seed7, Vala




 Java Programming at Wikibooks




Java is a general-purpose computer-programming language that is concurrent, class-based, object-oriented,[15] and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "write once, run anywhere" (WORA),[16] meaning that compiled Java code can run on all platforms that support Java without the need for recompilation.[17] Java applications are typically compiled to bytecode that can run on any Java virtual machine (JVM) regardless of computer architecture. As of 2016, Java is one of the most popular programming languages in use,[18][19][20][21] particularly for client-server web applications, with a reported 9 million developers.[22] Java was originally developed by James Gosling at Sun Microsystems (which has since been acquired by Oracle Corporation) and released in 1995 as a core component of Sun Microsystems' Java platform. The language derives much of its syntax from C and C++, but it has fewer low-level facilities than either of them.
The original and reference implementation Java compilers, virtual machines, and class libraries were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the Java Community Process, Sun relicensed most of its Java technologies under the GNU General Public License. Others have also developed alternative implementations of these Sun technologies, such as the GNU Compiler for Java (bytecode compiler), GNU Classpath (standard libraries), and IcedTea-Web (browser plugin for applets).
The latest version is Java 10, released on March 20, 2018, [23] which follows Java 9 after only six months [24] in line with the new release schedule. Java 8 is still supported but there will be no more security updates for Java 9.[25] Versions earlier than Java 8 are supported by companies on a commercial basis; e.g. by Oracle back to Java 6 as of October 2017 (while they still "highly recommend that you uninstall"[26] pre-Java 8 from at least Windows computers).



Contents


1 History

1.1 Principles
1.2 Versions


2 Practices

2.1 Java platform

2.1.1 Implementations
2.1.2 Performance


2.2 Automatic memory management


3 Syntax
4 "Hello world" example
5 Special classes

5.1 Applet
5.2 Servlet
5.3 JavaServer Pages
5.4 Swing application
5.5 Generics


6 Criticism
7 Use outside the Java platform

7.1 Android

7.1.1 Controversy




8 Class libraries
9 Documentation
10 Editions
11 See also

11.1 Comparison of Java with other languages


12 Notes
13 References
14 External links



History
See also: Java (software platform) § History




Duke, the Java mascot






James Gosling, the creator of Java (2008)






The TIOBE programming language popularity index graph from 2002 to 2015. Over the course of a decade Java (blue) and C (black) competed for the top position.


James Gosling, Mike Sheridan, and Patrick Naughton initiated the Java language project in June 1991.[27] Java was originally designed for interactive television, but it was too advanced for the digital cable television industry at the time.[28] The language was initially called Oak after an oak tree that stood outside Gosling's office. Later the project went by the name Green and was finally renamed Java, from Java coffee.[29] Gosling designed Java with a C/C++-style syntax that system and application programmers would find familiar.[30]
Sun Microsystems released the first public implementation as Java 1.0 in 1995.[31] It promised "Write Once, Run Anywhere" (WORA), providing no-cost run-times on popular platforms. Fairly secure and featuring configurable security, it allowed network- and file-access restrictions. Major web browsers soon incorporated the ability to run Java applets within web pages, and Java quickly became popular. The Java 1.0 compiler was re-written in Java by Arthur van Hoff to comply strictly with the Java 1.0 language specification.[32] With the advent of Java 2 (released initially as J2SE 1.2 in December 1998 – 1999), new versions had multiple configurations built for different types of platforms. J2EE included technologies and APIs for enterprise applications typically run in server environments, while J2ME featured APIs optimized for mobile applications. The desktop version was renamed J2SE. In 2006, for marketing purposes, Sun renamed new J2 versions as Java EE, Java ME, and Java SE, respectively.
In 1997, Sun Microsystems approached the ISO/IEC JTC 1 standards body and later the Ecma International to formalize Java, but it soon withdrew from the process.[33][34][35] Java remains a de facto standard, controlled through the Java Community Process.[36] At one time, Sun made most of its Java implementations available without charge, despite their proprietary software status. Sun generated revenue from Java through the selling of licenses for specialized products such as the Java Enterprise System.
On November 13, 2006, Sun released much of its Java virtual machine (JVM) as free and open-source software, (FOSS), under the terms of the GNU General Public License (GPL). On May 8, 2007, Sun finished the process, making all of its JVM's core code available under free software/open-source distribution terms, aside from a small portion of code to which Sun did not hold the copyright.[37]
Sun's vice-president Rich Green said that Sun's ideal role with regard to Java was as an "evangelist".[38] Following Oracle Corporation's acquisition of Sun Microsystems in 2009–10, Oracle has described itself as the "steward of Java technology with a relentless commitment to fostering a community of participation and transparency".[39] This did not prevent Oracle from filing a lawsuit against Google shortly after that for using Java inside the Android SDK (see Google section below). Java software runs on everything from laptops to data centers, game consoles to scientific supercomputers.[40] On April 2, 2010, James Gosling resigned from Oracle.[41]
In January 2016, Oracle announced that Java runtime environments based on JDK 9 will discontinue the browser plugin.[42]
Principles
There were five primary goals in the creation of the Java language:[17]

It must be "simple, object-oriented, and familiar".
It must be "robust and secure".
It must be "architecture-neutral and portable".
It must execute with "high performance".
It must be "interpreted, threaded, and dynamic".

Versions
Main article: Java version history
As of 20 March 2018[update], both Java 8 and 10 are officially supported. Major release versions of Java, along with their release dates:

JDK 1.0 (January 23, 1996)[43]
JDK 1.1 (February 19, 1997)
J2SE 1.2 (December 8, 1998)
J2SE 1.3 (May 8, 2000)
J2SE 1.4 (February 6, 2002)
J2SE 5.0 (September 30, 2004)
Java SE 6 (December 11, 2006)
Java SE 7 (July 28, 2011)
Java SE 8 (March 18, 2014)
Java SE 9 (September 21, 2017)
Java SE 10 (March 20, 2018)

Practices
Java platform
Main articles: Java (software platform) and Java virtual machine
One design goal of Java is portability, which means that programs written for the Java platform must run similarly on any combination of hardware and operating system with adequate runtime support. This is achieved by compiling the Java language code to an intermediate representation called Java bytecode, instead of directly to architecture-specific machine code. Java bytecode instructions are analogous to machine code, but they are intended to be executed by a virtual machine (VM) written specifically for the host hardware. End users commonly use a Java Runtime Environment (JRE) installed on their own machine for standalone Java applications, or in a web browser for Java applets.
Standard libraries provide a generic way to access host-specific features such as graphics, threading, and networking.
The use of universal bytecode makes porting simple. However, the overhead of interpreting bytecode into machine instructions made interpreted programs almost always run more slowly than native executables. Just-in-time (JIT) compilers that compile bytecodes to machine code during runtime were introduced from an early stage. Java itself is platform-independent and is adapted to the particular platform it is to run on by a Java virtual machine for it, which translates the Java bytecode into the platform's machine language.[44]
Implementations
See also: Free Java implementations
Oracle Corporation is the current owner of the official implementation of the Java SE platform, following their acquisition of Sun Microsystems on January 27, 2010. This implementation is based on the original implementation of Java by Sun. The Oracle implementation is available for Microsoft Windows (still works for XP, while only later versions are currently officially supported), macOS, Linux, and Solaris. Because Java lacks any formal standardization recognized by Ecma International, ISO/IEC, ANSI, or other third-party standards organization, the Oracle implementation is the de facto standard.
The Oracle implementation is packaged into two different distributions: The Java Runtime Environment (JRE) which contains the parts of the Java SE platform required to run Java programs and is intended for end users, and the Java Development Kit (JDK), which is intended for software developers and includes development tools such as the Java compiler, Javadoc, Jar, and a debugger.
OpenJDK is another notable Java SE implementation that is licensed under the GNU GPL. The implementation started when Sun began releasing the Java source code under the GPL. As of Java SE 7, OpenJDK is the official Java reference implementation.
The goal of Java is to make all implementations of Java compatible. Historically, Sun's trademark license for usage of the Java brand insists that all implementations be "compatible". This resulted in a legal dispute with Microsoft after Sun claimed that the Microsoft implementation did not support RMI or JNI and had added platform-specific features of their own. Sun sued in 1997, and, in 2001, won a settlement of US$20 million, as well as a court order enforcing the terms of the license from Sun.[45] As a result, Microsoft no longer ships Java with Windows.
Platform-independent Java is essential to Java EE, and an even more rigorous validation is required to certify an implementation. This environment enables portable server-side applications.
Performance
Main article: Java performance
Programs written in Java have a reputation for being slower and requiring more memory than those written in C++.[46][47] However, Java programs' execution speed improved significantly with the introduction of just-in-time compilation in 1997/1998 for Java 1.1,[48] the addition of language features supporting better code analysis (such as inner classes, the StringBuilder class, optional assertions, etc.), and optimizations in the Java virtual machine, such as HotSpot becoming the default for Sun's JVM in 2000. With Java 1.5, the performance was improved with the addition of the java.util.concurrent package, including lock free implementations of the ConcurrentMaps and other multi-core collections, and it was improved further with Java 1.6.
Some platforms offer direct hardware support for Java; there are microcontrollers that can run Java in hardware instead of a software Java virtual machine[49], and some ARM based processors could have hardware support for executing Java bytecode through their Jazelle option, though support has mostly been dropped in current implementations of ARM.
Automatic memory management
Java uses an automatic garbage collector to manage memory in the object lifecycle. The programmer determines when objects are created, and the Java runtime is responsible for recovering the memory once objects are no longer in use. Once no references to an object remain, the unreachable memory becomes eligible to be freed automatically by the garbage collector. Something similar to a memory leak may still occur if a programmer's code holds a reference to an object that is no longer needed, typically when objects that are no longer needed are stored in containers that are still in use. If methods for a nonexistent object are called, a "null pointer exception" is thrown.[50][51]
One of the ideas behind Java's automatic memory management model is that programmers can be spared the burden of having to perform manual memory management. In some languages, memory for the creation of objects is implicitly allocated on the stack or explicitly allocated and deallocated from the heap. In the latter case, the responsibility of managing memory resides with the programmer. If the program does not deallocate an object, a memory leak occurs. If the program attempts to access or deallocate memory that has already been deallocated, the result is undefined and difficult to predict, and the program is likely to become unstable or crash. This can be partially remedied by the use of smart pointers, but these add overhead and complexity. Note that garbage collection does not prevent "logical" memory leaks, i.e., those where the memory is still referenced but never used.
Garbage collection may happen at any time. Ideally, it will occur when a program is idle. It is guaranteed to be triggered if there is insufficient free memory on the heap to allocate a new object; this can cause a program to stall momentarily. Explicit memory management is not possible in Java.
Java does not support C/C++ style pointer arithmetic, where object addresses and unsigned integers (usually long integers) can be used interchangeably. This allows the garbage collector to relocate referenced objects and ensures type safety and security.
As in C++ and some other object-oriented languages, variables of Java's primitive data types are either stored directly in fields (for objects) or on the stack (for methods) rather than on the heap, as is commonly true for non-primitive data types (but see escape analysis). This was a conscious decision by Java's designers for performance reasons.
Java contains multiple types of garbage collectors. By default, HotSpot uses the parallel scavenge garbage collector.[52] However, there are also several other garbage collectors that can be used to manage the heap. For 90% of applications in Java, the Concurrent Mark-Sweep (CMS) garbage collector is sufficient.[53] Oracle aims to replace CMS with the Garbage-First collector (G1).[54]
Syntax
Main article: Java syntax




Dependency graph of the Java Core classes (created with jdeps and Gephi). The most frequently used classes Object and String appear in the centre of the diagram.


The syntax of Java is largely influenced by C++. Unlike C++, which combines the syntax for structured, generic, and object-oriented programming, Java was built almost exclusively as an object-oriented language.[17] All code is written inside classes, and every data item is an object, with the exception of the primitive data types, (i.e. integers, floating-point numbers, boolean values, and characters), which are not objects for performance reasons. Java reuses some popular aspects of C++ (such as the printf method).
Unlike C++, Java does not support operator overloading[55] or multiple inheritance for classes, though multiple inheritance is supported for interfaces.[56]
Java uses comments similar to those of C++. There are three different styles of comments: a single line style marked with two slashes (//), a multiple line style opened with /* and closed with */, and the Javadoc commenting style opened with /** and closed with */. The Javadoc style of commenting allows the user to run the Javadoc executable to create documentation for the program and can be read by some integrated development environments (IDEs) such as Eclipse to allow developers to access documentation within the IDE.
Example:


// This is an example of a single line comment using two slashes

/* This is an example of a multiple line comment using the slash and asterisk.
 This type of comment can be used to hold a lot of information or deactivate
 code, but it is very important to remember to close the comment. */

package fibsandlies;
import java.util.HashMap;

/**
 * This is an example of a Javadoc comment; Javadoc can compile documentation
 * from this text. Javadoc comments must immediately precede the class, method, or field being documented.
 */
public class FibCalculator extends Fibonacci implements Calculator {
    private static Map<Integer, Integer> memoized = new HashMap<Integer, Integer>();

    /*
     * The main method written as follows is used by the JVM as a starting point for the program.
     */
    public static void main(String[] args) {
        memoized.put(1, 1);
        memoized.put(2, 1);
        System.out.println(fibonacci(12)); //Get the 12th Fibonacci number and print to console
    }

    /**
     * An example of a method written in Java, wrapped in a class.
     * Given a non-negative number FIBINDEX, returns
     * the Nth Fibonacci number, where N equals FIBINDEX.
     * @param fibIndex The index of the Fibonacci number
     * @return The Fibonacci number
     */
    public static int fibonacci(int fibIndex) {
        if (memoized.containsKey(fibIndex)) {
            return memoized.get(fibIndex);
        } else {
            int answer = fibonacci(fibIndex - 1) + fibonacci(fibIndex - 2);
            memoized.put(fibIndex, answer);
            return answer;
        }
    }
}

"Hello world" example
The traditional "Hello, world!" program can be written in Java as:[57]


class HelloWorldApp {
    public static void main(String[] args) {
        System.out.println("Hello World!"); // Prints the string to the console.
    }
}

Source files must be named after the public class they contain, appending the suffix .java, for example, HelloWorldApp.java. It must first be compiled into bytecode, using a Java compiler, producing a file named HelloWorldApp.class. Only then can it be executed, or "launched". The Java source file may only contain one public class, but it can contain multiple classes with other than public access modifier and any number of public inner classes. When the source file contains multiple classes, make one class "public" and name the source file with that public class name.
A class that is not declared public may be stored in any .java file. The compiler will generate a class file for each class defined in the source file. The name of the class file is the name of the class, with .class appended. For class file generation, anonymous classes are treated as if their name were the concatenation of the name of their enclosing class, a $, and an integer.
The keyword public denotes that a method can be called from code in other classes, or that a class may be used by classes outside the class hierarchy. The class hierarchy is related to the name of the directory in which the .java file is located. This is called an access level modifier. Other access level modifiers include the keywords private and protected.
The keyword static in front of a method indicates a static method, which is associated only with the class and not with any specific instance of that class. Only static methods can be invoked without a reference to an object. Static methods cannot access any class members that are not also static. Methods that are not designated static are instance methods and require a specific instance of a class to operate.
The keyword void indicates that the main method does not return any value to the caller. If a Java program is to exit with an error code, it must call System.exit() explicitly.
The method name "main" is not a keyword in the Java language. It is simply the name of the method the Java launcher calls to pass control to the program. Java classes that run in managed environments such as applets and Enterprise JavaBeans do not use or need a main() method. A Java program may contain multiple classes that have main methods, which means that the VM needs to be explicitly told which class to launch from.
The main method must accept an array of String objects. By convention, it is referenced as args although any other legal identifier name can be used. Since Java 5, the main method can also use variable arguments, in the form of public static void main(String... args), allowing the main method to be invoked with an arbitrary number of String arguments. The effect of this alternate declaration is semantically identical (to the args parameter which is still an array of String objects), but it allows an alternative syntax for creating and passing the array.
The Java launcher launches Java by loading a given class (specified on the command line or as an attribute in a JAR) and starting its public static void main(String[]) method. Stand-alone programs must declare this method explicitly. The String[] args parameter is an array of String objects containing any arguments passed to the class. The parameters to main are often passed by means of a command line.
Printing is part of a Java standard library: The System class defines a public static field called out. The out object is an instance of the PrintStream class and provides many methods for printing data to standard out, including println(String) which also appends a new line to the passed string.
The string "Hello World!" is automatically converted to a String object by the compiler.
Special classes






This section contains instructions, advice, or how-to content. The purpose of Wikipedia is to present facts, not to train. Please help improve this article either by rewriting the how-to content or by moving it to Wikiversity, Wikibooks or Wikivoyage. (January 2012)



Applet
Main article: Java applet
Java applets are programs that are embedded in other applications, typically in a Web page displayed in a web browser. The below Java program is an example of how this is done; note the absence of a main method.


import javax.swing.JApplet;
import java.awt.Graphics;

public class Hello extends JApplet {
    public void paintComponent(final Graphics g) {
        g.drawString("Hello, world!", 65, 95);
    }
}

The import statements direct the Java compiler to include the javax.swing.JApplet and java.awt.Graphics classes in the compilation. The import statement allows these classes to be referenced in the source code using the simple class name (i.e. JApplet) instead of the fully qualified class name (FQCN, i.e. javax.swing.JApplet).
The Hello class extends (subclasses) the JApplet (Java Applet) class; the JApplet class provides the framework for the host application to display and control the lifecycle of the applet. The JApplet class is a JComponent (Java Graphical Component) which provides the applet with the capability to display a graphical user interface (GUI) and respond to user events.
The Hello class overrides the paintComponent(Graphics) method (additionally indicated with the annotation, supported as of JDK 1.5, Override) inherited from the Container superclass to provide the code to display the applet. The paintComponent() method is passed a Graphics object that contains the graphic context used to display the applet. The paintComponent() method calls the graphic context drawString(String, int, int) method to display the "Hello, world!" string at a pixel offset of (65, 95) from the upper-left corner in the applet's display.


<applet code="Hello.class" width="200" height="200">

An applet is placed in an HTML document using the <applet> HTML element. The applet tag has three attributes set: code="Hello.class" specifies the name of the JApplet class and width="200" height="200" sets the pixel width and height of the applet. Applets may also be embedded in HTML using either the object or embed element,[58] although support for these elements by web browsers is inconsistent.[59] However, the applet tag is deprecated, so the object tag is preferred where supported.
The host application, typically a Web browser, instantiates the Hello applet and creates an AppletContext for the applet. Once the applet has initialized itself, it is added to the AWT display hierarchy. The paintComponent() method is called by the AWT event dispatching thread whenever the display needs the applet to draw itself.
Servlet
Main article: Java Servlet
Java Servlet technology provides Web developers with a simple, consistent mechanism for extending the functionality of a Web server and for accessing existing business systems. Servlets are server-side Java EE components that generate responses (typically HTML pages) to requests (typically HTTP requests) from clients. A servlet can almost be thought of as an applet that runs on the server side—without a face.


// Hello.java
import java.io.*;
import javax.servlet.*;

public class Hello extends GenericServlet {
    public void service(final ServletRequest request, final ServletResponse response)
    throws ServletException, IOException {
        response.setContentType("text/html");
        final PrintWriter pw = response.getWriter();
        try {
            pw.println("Hello, world!");
        } finally {
            pw.close();
        }
    }
}

The import statements direct the Java compiler to include all the public classes and interfaces from the java.io and javax.servlet packages in the compilation. Packages make Java well suited for large-scale applications.
The Hello class extends the GenericServlet class; the GenericServlet class provides the interface for the server to forward requests to the servlet and control the servlet's lifecycle.
The Hello class overrides the service(ServletRequest, ServletResponse) method defined by the Servlet interface to provide the code for the service request handler. The service() method is passed: a ServletRequest object that contains the request from the client and a ServletResponse object used to create the response returned to the client. The service() method declares that it throws the exceptions ServletException and IOException if a problem prevents it from responding to the request.
The setContentType(String) method in the response object is called to set the MIME content type of the returned data to "text/html". The getWriter() method in the response returns a PrintWriter object that is used to write the data that is sent to the client. The println(String) method is called to write the "Hello, world!" string to the response and then the close() method is called to close the print writer, which causes the data that has been written to the stream to be returned to the client.
JavaServer Pages
Main article: JavaServer Pages
JavaServer Pages (JSP) are server-side Java EE components that generate responses, typically HTML pages, to HTTP requests from clients. JSPs embed Java code in an HTML page by using the special delimiters <% and %>. A JSP is compiled to a Java servlet, a Java application in its own right, the first time it is accessed. After that, the generated servlet creates the response.
Swing application
Main article: Swing (Java)
Swing is a graphical user interface library for the Java SE platform. It is possible to specify a different look and feel through the pluggable look and feel system of Swing. Clones of Windows, GTK+, and Motif are supplied by Sun. Apple also provides an Aqua look and feel for macOS. Where prior implementations of these looks and feels may have been considered lacking, Swing in Java SE 6 addresses this problem by using more native GUI widget drawing routines of the underlying platforms.
This example Swing application creates a single window with "Hello, world!" inside:


// Hello.java (Java SE 5)
import javax.swing.*;

public class Hello extends JFrame {
    public Hello() {
        super("hello");
        super.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        super.add(new JLabel("Hello, world!"));
        super.pack();
        super.setVisible(true);
    }

    public static void main(final String[] args) {
        new Hello();
    }
}

The first import includes all the public classes and interfaces from the javax.swing package.
The Hello class extends the JFrame class; the JFrame class implements a window with a title bar and a close control.
The Hello() constructor initializes the frame by first calling the superclass constructor, passing the parameter "hello", which is used as the window's title. It then calls the setDefaultCloseOperation(int) method inherited from JFrame to set the default operation when the close control on the title bar is selected to WindowConstants.EXIT_ON_CLOSE –  this causes the JFrame to be disposed of when the frame is closed (as opposed to merely hidden), which allows the Java virtual machine to exit and the program to terminate. Next, a JLabel is created for the string "Hello, world!" and the add(Component) method inherited from the Container superclass is called to add the label to the frame. The pack() method inherited from the Window superclass is called to size the window and lay out its contents.
The main() method is called by the Java virtual machine when the program starts. It instantiates a new Hello frame and causes it to be displayed by calling the setVisible(boolean) method inherited from the Component superclass with the boolean parameter true. Once the frame is displayed, exiting the main method does not cause the program to terminate because the AWT event dispatching thread remains active until all of the Swing top-level windows have been disposed.
Generics
Main article: Generics in Java
In 2004, generics were added to the Java language, as part of J2SE 5.0. Prior to the introduction of generics, each variable declaration had to be of a specific type. For container classes, for example, this is a problem because there is no easy way to create a container that accepts only specific types of objects. Either the container operates on all subtypes of a class or interface, usually Object, or a different container class has to be created for each contained class. Generics allow compile-time type checking without having to create many container classes, each containing almost identical code. In addition to enabling more efficient code, certain runtime exceptions are prevented from occurring, by issuing compile-time errors. If Java prevented all runtime type errors (ClassCastException's) from occurring, it would be type safe.
In 2016, the type system was shown not to be safe at all, it was proven unsound.[60]
Criticism
Main article: Criticism of Java
Criticisms directed at Java include the implementation of generics,[61] speed,[62] the handling of unsigned numbers,[63] the implementation of floating-point arithmetic,[64] and a history of security vulnerabilities in the primary Java VM implementation HotSpot.[65]
Use outside the Java platform
The Java programming language requires the presence of a software platform in order for compiled programs to be executed. Oracle supplies the Java platform for use with Java. The Android SDK is an alternative software platform, used primarily for developing Android applications.
Android




The Android operating system makes extensive use of Java-related technology.


The Java language is a key pillar in Android, an open source mobile operating system. Although Android, built on the Linux kernel, is written largely in C, the Android SDK uses the Java language as the basis for Android applications. The bytecode language supported by the Android SDK is incompatible with Java bytecode and runs on its own virtual machine, optimized for low-memory devices such as smartphones and tablet computers. Depending on the Android version, the bytecode is either interpreted by the Dalvik virtual machine or compiled into native code by the Android Runtime.
Android does not provide the full Java SE standard library, although the Android SDK does include an independent implementation of a large subset of it. It supports Java 6 and some Java 7 features, offering an implementation compatible with the standard library (Apache Harmony).
Controversy
See also: Oracle America, Inc. v. Google, Inc.
The use of Java-related technology in Android led to a legal dispute between Oracle and Google. On May 7, 2012, a San Francisco jury found that if APIs could be copyrighted, then Google had infringed Oracle's copyrights by the use of Java in Android devices.[66] District Judge William Haskell Alsup ruled on May 31, 2012, that APIs cannot be copyrighted,[67] but this was reversed by the United States Court of Appeals for the Federal Circuit in May 2014.[68] On May 26, 2016, the district court decided in favor of Google, ruling the copyright infringement of the Java API in Android constitutes fair use.[69]
Class libraries






This section needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed. (December 2014) (Learn how and when to remove this template message)



Main article: Java Class Library
The Java Class Library is the standard library, developed to support application development in Java. It is controlled by Sun Microsystems in cooperation with others through the Java Community Process program. Companies or individuals participating in this process can influence the design and development of the APIs. This process has been a subject of controversy.[when?] The class library contains features such as:

The core libraries, which include:

IO/NIO
Networking
Reflection
Concurrency
Generics
Scripting/Compiler
Functional programming (Lambda, Streaming)
Collection libraries that implement data structures such as lists, dictionaries, trees, sets, queues and double-ended queue, or stacks[70]
XML Processing (Parsing, Transforming, Validating) libraries
Security[71]
Internationalization and localization libraries[72]


The integration libraries, which allow the application writer to communicate with external systems. These libraries include:

The Java Database Connectivity (JDBC) API for database access
Java Naming and Directory Interface (JNDI) for lookup and discovery
RMI and CORBA for distributed application development
JMX for managing and monitoring applications


User interface libraries, which include:

The (heavyweight, or native) Abstract Window Toolkit (AWT), which provides GUI components, the means for laying out those components and the means for handling events from those components
The (lightweight) Swing libraries, which are built on AWT but provide (non-native) implementations of the AWT widgetry
APIs for audio capture, processing, and playback
JavaFX


A platform dependent implementation of the Java virtual machine that is the means by which the bytecodes of the Java libraries and third party applications are executed
Plugins, which enable applets to be run in web browsers
Java Web Start, which allows Java applications to be efficiently distributed to end users across the Internet
Licensing and documentation

Documentation
Main article: Javadoc
Javadoc is a comprehensive documentation system, created by Sun Microsystems, used by many Java developers[by whom?]. It provides developers with an organized system for documenting their code. Javadoc comments have an extra asterisk at the beginning, i.e. the delimiters are /** and */, whereas the normal multi-line comments in Java are set off with the delimiters /* and */.[73]
Editions
See also: Free Java implementations § Class library


Java platform editions







Java Card
Micro Edition (ME)
Standard Edition (SE)
Enterprise Edition (EE)

Java EE version history


JavaFX (Merged to Java SE 8)
PersonalJava (discontinued)







v
t
e





Sun has defined and supports four editions of Java targeting different application environments and segmented many of its APIs so that they belong to one of the platforms. The platforms are:

Java Card for smartcards.[74]
Java Platform, Micro Edition (Java ME) – targeting environments with limited resources.[75]
Java Platform, Standard Edition (Java SE) – targeting workstation environments.[76]
Java Platform, Enterprise Edition (Java EE) – targeting large distributed enterprise or Internet environments.[77]

The classes in the Java APIs are organized into separate groups called packages. Each package contains a set of related interfaces, classes, and exceptions. Refer to the separate platforms for a description of the packages available.[relevant to this section? – discuss]
Sun also provided an edition called PersonalJava that has been superseded by later, standards-based Java ME configuration-profile pairings.
See also


Java portal
Computer programming portal







Book: Programming for Students





Dalvik – used in old Android versions, replaced by non-JIT Android Runtime
JavaOne
Javapedia
List of Java virtual machines
List of Java APIs
List of JVM languages
Graal, a project aiming to implement a high performance Java dynamic compiler and interpreter
Spring Framework

Comparison of Java with other languages

Comparison of programming languages
Comparison of Java and C++
Comparison of C# and Java

Notes


^ Binstock, Andrew (May 20, 2015). "Java's 20 Years of Innovation". Forbes. Retrieved March 18, 2016. 
^ Chaudhary, Harry H. (2014-07-28). "Cracking The Java Programming Interview :: 2000+ Java Interview Que/Ans". Retrieved 2016-05-29. 
^ Java 5.0 added several new language features (the enhanced for loop, autoboxing, varargs and annotations), after they were introduced in the similar (and competing) C# language. [1] [2]
^ Gosling, James; McGilton, Henry (May 1996). "The Java Language Environment". 
^ Gosling, James; Joy, Bill; Steele, Guy; Bracha, Gilad. "The Java Language Specification, 2nd Edition". 
^ "The A-Z of Programming Languages: Modula-3". Computerworld.com.au. Archived from the original on January 5, 2009. Retrieved June 9, 2010. 
^ Niklaus Wirth stated on a number of public occasions, e.g. in a lecture at the Polytechnic Museum, Moscow in September 2005 (several independent first-hand accounts in Russian exist, e.g. one with an audio recording: Filippova, Elena (September 22, 2005). "Niklaus Wirth's lecture at the Polytechnic Museum in Moscow". ), that the Sun Java design team licensed the Oberon compiler sources a number of years prior to the release of Java and examined it: a (relative) compactness, type safety, garbage collection, no multiple inheritance for classes –  all these key overall design features are shared by Java and Oberon.
^ Patrick Naughton cites Objective-C as a strong influence on the design of the Java programming language, stating that notable direct derivatives include Java interfaces (derived from Objective-C's protocol) and primitive wrapper classes. [3]
^ TechMetrix Research (1999). "History of Java" (PDF). Java Application Servers Report. Archived from the original (PDF) on December 29, 2010. The project went ahead under the name "green" and the language was based on an old model of UCSD Pascal, which makes it possible to generate interpretive code 
^ "A Conversation with James Gosling – ACM Queue". Queue.acm.org. August 31, 2004. Retrieved 2010-06-09. 
^ In the summer of 1996, Sun was designing the precursor to what is now the event model of the AWT and the JavaBeans TM component architecture. Borland contributed greatly to this process. We looked very carefully at Delphi Object Pascal and built a working prototype of bound method references in order to understand their interaction with the Java programming language and its APIs.White Paper About Microsoft's "Delegates"
^ "Chapel spec (Acknowledgements)" (PDF). Cray Inc. 2015-10-01. Retrieved 2016-01-14. 
^ "Gambas Documentation Introduction". Gambas Website. Retrieved 2017-10-09. 
^ "Facebook Q&A: Hack brings static typing to PHP world". InfoWorld. March 26, 2014. Retrieved 2015-01-11. 
^ Gosling et al. 2014, p. 1.
^ "Write once, run anywhere?". Computer Weekly. May 2, 2002. Retrieved 2009-07-27. 
^ a b c "1.2 Design Goals of the Java™ Programming Language". Oracle. January 1, 1999. Retrieved 2013-01-14. 
^ McMillan, Robert (August 1, 2013). "Is Java Losing Its Mojo?". wired.com. Java is on the wane, at least according to one outfit that keeps on eye on the ever-changing world of computer programming languages. For more than a decade, it has dominated the TIOBE Programming Community Index, and is back on top – a snapshot of software developer enthusiasm that looks at things like internet search results to measure how much buzz different languages have. But lately, Java has been slipping. 
^ RedMonk Index on redmonk.com (Stephen O'Grady, January 2015)
^ "Programming Language Popularity". langpop.com. October 25, 2013. Archived from the original on January 16, 2009. Retrieved April 2, 2015. Normalized Comparison: 1st C, 2nd Java, 3rd PHP 
^ "TIOBE Programming Community Index". 2015. Retrieved 2015-04-03. 
^ "JavaOne 2013 Review: Java Takes on the Internet of Things". www.oracle.com. Retrieved 2016-06-19. 
^ https://www.oracle.com/corporate/pressrelease/Java-10-032018.html
^ Waters, John K. (September 21, 2017). "Java SE 9 and Java EE 8 Released Today". ADTMag. Archived from the original on September 21, 2017. 
^ http://www.oracle.com/technetwork/java/eol-135779.html
^ "Why should I uninstall older versions of Java from my system?". www.java.com. 
^ Byous, Jon (c. 1998). "Java technology: The early years". Sun Developer Network. Sun Microsystems. Archived from the original on April 20, 2005. Retrieved 2005-04-22. 
^ Object-oriented programming "The History of Java Technology". Sun Developer Network. c. 1995. Retrieved 2010-04-30. 
^ "So why did they decide to call it Java?", Kieron Murphy, JavaWorld.com, 10/04/96
^ Kabutz, Heinz; Once Upon an Oak. Artima. Retrieved April 29, 2007.
^ "The History of Java Technology". Retrieved October 6, 2012. 
^ Object-oriented Programming with Java: Essentials and Applications. Tata McGraw-Hill Education. p. 34. 
^ "JSG – Java Study Group". open-std.org. 
^ "Why Java™ Was – Not – Standardized Twice" (PDF). 
^ "What is ECMA—and why Microsoft cares". 
^ "Java Community Process website". Jcp.org. May 24, 2010. Retrieved 2010-06-09. 
^ "JAVAONE: Sun – The bulk of Java is open sourced". GrnLight.net. Retrieved 2014-05-26. 
^ "Sun's Evolving Role as Java Evangelist". O'Reilly Media. 
^ "Oracle and Java". oracle.com. Oracle Corporation. Archived from the original on January 31, 2010. Retrieved 2010-08-23. Oracle has been a leading and substantive supporter of Java since its emergence in 1995 and takes on the new role as steward of Java technology with a relentless commitment to fostering a community of participation and transparency. CS1 maint: BOT: original-url status unknown (link)
^ "Learn About Java Technology". Oracle. Retrieved November 21, 2011. 
^ Gosling, James (April 9, 2010). "Time to move on..." On a New Road. Archived from the original on November 5, 2010. Retrieved 2011-11-16. CS1 maint: BOT: original-url status unknown (link)
^ Topic, Dalibor. "Moving to a Plugin-Free Web". 
^ "JAVASOFT SHIPS JAVA 1.0". Archived from the original on March 10, 2007. Retrieved 2008-02-05. 
^ "Is the JVM (Java Virtual Machine) platform dependent or platform independent? What is the advantage of using the JVM, and having Java be a translated language?". Programmer Interview. Retrieved 2015-01-19. 
^ Niccolai, James (January 23, 2001). "Sun, Microsoft settle Java lawsuit". JavaWorld. International Data Group. Retrieved 2008-07-09. 
^ Jelovic, Dejan. "Why Java will always be slower than C++". Archived from the original on February 11, 2008. Retrieved February 15, 2008. 
^ Google. "Loop Recognition in C++/Java/Go/Scala" (PDF). Retrieved 2012-07-12. 
^ "Symantec's Just-In-Time Java Compiler To Be Integrated into Sun JDK 1.1". 
^ Salcic, Zoran; Park, Heejong; Teich, Jürgen; Malik, Avinash; Nadeem, Muhammad (2017-07-22). "Noc-HMP: A Heterogeneous Multicore Processor for Embedded Systems Designed in SystemJ". ACM Transactions on Design Automation of Electronic Systems (TODAES). 22 (4): 73. doi:10.1145/3073416. ISSN 1084-4309. 
^ "NullPointerException". Oracle. Retrieved 2014-05-06. 
^ "Exceptions in Java". Artima.com. Retrieved 2010-08-10. 
^ "Java HotSpot™ Virtual Machine Performance Enhancements". Oracle.com. Retrieved 2017-04-26. 
^ "Java HotSpot VM Options". Oracle.com. 2010-09-07. Retrieved 2012-06-30. 
^ "Garbage-First Collector". docs.oracle.com. 
^ "Operator Overloading (C# vs Java)". C# for Java Developers. Microsoft. Retrieved December 10, 2014. 
^ "Multiple Inheritance of State, Implementation, and Type". The Java™ Tutorials. Oracle. Retrieved December 10, 2014. 
^ "Lesson: A Closer Look at the "Hello World!" Application". The Java™ Tutorials > Getting Started. Oracle Corporation. Retrieved 2011-04-14. 
^ "Using applet, object and embed Tags". oracle.com. Retrieved 2010-10-14. 
^ "Deploying Applets in a Mixed-Browser Environment". oracle.com. Retrieved 2010-10-14. 
^ "Java and Scala's Type Systems are Unsound" (PDF). 
^ Arnold, Ken. "Generics Considered Harmful". java.net. Archived from the original on October 10, 2007. Retrieved September 10, 2015. CS1 maint: BOT: original-url status unknown (link) . More comments to the original article available at earlier archive snapshots like .
^ Jelovic, Dejan. "Why Java Will Always Be Slower than C++". www.jelovic.com. Archived from the original on February 11, 2008. Retrieved October 17, 2012. 
^ Owens, Sean R. "Java and unsigned int, unsigned short, unsigned byte, unsigned long, etc. (Or rather, the lack thereof)". Archived from the original on February 20, 2009. Retrieved 2011-07-04. 
^ Kahan, William. "How Java's Floating-Point Hurts Everyone Everywhere" (PDF). Electrical Engineering & Computer Science, University of California at Berkeley. Retrieved June 4, 2011. 
^ "Have you checked the Java?". 
^ Mullin, Joe. "Google guilty of infringement in Oracle trial; future legal headaches loom". Law & Disorder. Ars Technica. Retrieved 2012-05-08. 
^ Mullin, Joe (May 31, 2012). "Google wins crucial API ruling, Oracle's case decimated". Ars Technica. Retrieved 2012-06-01. 
^ Rosenblatt, Seth (May 9, 2014). "Court sides with Oracle over Android in Java patent appeal". CNET. Retrieved 2014-05-10. 
^ Mullin, Joe (2016-05-26). "Google beats Oracle—Android makes "fair use" of Java APIs". Ars Technica. Retrieved 2016-05-26. 
^ "Collections Framework Overview". Java Documentation. Oracle. Retrieved December 18, 2014. 
^ "Java™ Security Overview". Java Documentation. Oracle. Retrieved December 18, 2014. 
^ "Trail: Internationalization". The Java™ Tutorials. Oracle. Retrieved December 18, 2014. 
^ "How to Write Doc Comments for the Javadoc Tool". Oracle Technology Network. Oracle. Retrieved December 18, 2014. 
^ "Java Card Overview". Oracle Technology Network. Oracle. Retrieved December 18, 2014. 
^ "Java Platform, Micro Edition (Java ME)". Oracle Technology Network. Oracle. Retrieved December 18, 2014. 
^ "Java SE". Oracle Technology Network. Oracle. Retrieved December 18, 2014. 
^ "Java Platform, Enterprise Edition (Java EE)". Oracle Technology Network. Oracle. Retrieved December 18, 2014. 


References


Gosling, James; Joy, Bill; Steele, Guy; Bracha, Gilad; Buckley, Alex (2014). The Java® Language Specification (PDF) (Java SE 8 ed.). 
Gosling, James; Joy, Bill; Steele, Guy L., Jr.; Bracha, Gilad (2005). The Java Language Specification (3rd ed.). Addison-Wesley. ISBN 0-321-24678-0. 
Lindholm, Tim; Yellin, Frank (1999). The Java Virtual Machine Specification (2nd ed.). Addison-Wesley. ISBN 0-201-43294-3. 


External links

Find more aboutJava (programming language)at Wikipedia's sister projects

Definitions from Wiktionary
Media from Wikimedia Commons
News from Wikinews
Quotations from Wikiquote
Textbooks from Wikibooks
Learning resources from Wikiversity





Wikiversity has learning resources about Java Platform, Enterprise Edition/Java EE Tutorial








v
t
e


Java



Platforms



Java language
JVM
Micro Edition
Standard Edition
Enterprise Edition
Java Card
Android SDK








Oracle technologies



Squawk
Java Development Kit
OpenJDK
Java virtual machine
JavaFX
Maxine VM





Platform technologies



Applets
Servlets
MIDlets
JSP
Web Start (JNLP)





Major third-party technologies



Blackdown
Eclipse
GNU Classpath
GWT
Harmony
Hibernate
IcedTea
Jazelle
Spring
Struts
TopLink
WildFly





History



Java version history
Java Community Process
Sun Microsystems
Free Java implementations





Major JVM languages



BeanShell
Clojure
Groovy
Oxygene
JRuby
Jython
Kotlin
Processing
Rhino
Scala
Tcl/Java





Conferences



JavaOne
Devoxx












v
t
e


Sun Microsystems (acquired by Oracle Corp, 2010)



People



Bill Joy
Andy Bechtolsheim
Scott McNealy
Vinod Khosla
List of notable employees





Hardware



Sun-1
Sun-2
Sun-3
Sun386i
Sun-4
SPARCstation
Netra
Ultra
Enterprise
Sun Blade
Sun Fire
SPARC Enterprise
SPARC
JavaStation
Sun Ray
Sun Modular Datacenter
more...





Software



SunOS
Solaris
NIS (+)
NFS
ZFS
SunView
NeWS
OpenWindows
Java Desktop System
Sun Studio
Java
StarOffice
iPlanet/Sun ONE/Java Enterprise System
Sun Secure Global Desktop
MySQL
Sun xVM
GlassFish
more...





Storage



StorageTek
Sun Open Storage
QFS
ZFS





High-performance computing



Sun Cloud
Sun Constellation System
Sun Visualization System
Sun Grid Engine
Lustre





Research



Sun Labs
picoJava
Fortress
Project Looking Glass





Education



SCPs
BlueJ





Community



Common Development and Distribution License
Java Community Process
NetBeans
OpenOffice.org
OpenSolaris
OpenSPARC
OpenJDK
OSUM












v
t
e


Oracle Corporation



Corporate directors



Jeffrey Berg
H. Raymond Bingham
Michael Boskin
Safra Catz
Larry Ellison
Héctor García-Molina
Joseph Grundfest
Jeffrey O. Henley
Mark Hurd
Jack F. Kemp
Donald L. Lucas
Naomi O. Seligman





Acquisitions (list)



Sun
PeopleSoft
Hyperion
Siebel
BEA
JD Edwards
RightNow
Virtual Iron
TimesTen
Sunopsis
NetSuite





DBMS



Oracle Database
MySQL
InnoDB
Berkeley DB
TimesTen
Rdb
Essbase





Programming languages



Java
PL/SQL





IDE



JDeveloper
Forms
NetBeans
Apex
SQL Developer
Developer Studio





Middleware



Fusion Middleware
WebCenter
SOA Suite
WebLogic Server
Coherence
Tuxedo
GlassFish





Operating systems



Oracle Linux
Oracle Solaris





Computer hardware



Sun Fire
SPARC (T-Series, Enterprise)
StorageTek





Computer appliances



Oracle Exadata
Oracle Exalogic
Big Data Appliance





Education and recognition



Oracle Certification Program








 Category
 Commons












v
t
e


Programming languages






Comparison
Timeline
History








APL
Assembly
BASIC
C
C++
C#
COBOL
Fortran
Go
Groovy
Haskell
Java
JavaScript (JS)
Lisp
Lua
Objective-C
Pascal
Perl
PHP
Python
Ruby
Shell
Smalltalk
Swift
Visual Basic .NET (VB.NET)
more...








 Category
 Lists

Alphabetical
Categorical
Generational
Non-English-based














v
t
e


Free and open-source software



General



Alternative terms for free software
Comparison of open-source and closed-source software
Comparison of source code hosting facilities
Free software
Free software project directories
Gratis versus libre
Long-term support
Open-source software
Open-source software development
Outline





Software
packages



Audio
Bioinformatics
Codecs
Collaboration
Configuration management
Device drivers

Graphics
Wireless


Geophysics
Health
Mathematics
Operating systems
Programming languages
Routing
Statistics
Television
Video games
Web applications

Content management systems
E-commerce


Word processors
Android apps
iOS apps
Commercial
Trademarked
Formerly proprietary





Community



Free software movement
History
Open-source software movement
Organizations
Events





Licenses



AFL
Apache
APSL
Artistic
Beerware
Boost
BSD
CC0
CDDL
EPL
Free Software Foundation

GNU GPL
GNU LGPL


ISC
MIT
MPL
Ms-PL/RL
Python
Python Software Foundation License
Sleepycat
Unlicense
WTFPL
zlib





License types
and standards



Comparison of free and open-source software licenses
Contributor License Agreement
Copyleft
Debian Free Software Guidelines
Definition of Free Cultural Works
Free license
The Free Software Definition
The Open Source Definition
Open-source license
Permissive software licence
Public domain
Viral license





Challenges



Binary blob
Digital rights management
Hardware restrictions
License proliferation
Mozilla software rebranding
Proprietary software
SCO/Linux controversies
Secure boot
Software patents
Software security
Trusted Computing





Related topics



The Cathedral and the Bazaar
Forking
Microsoft Open Specification Promise
Open-source hardware
Revolution OS








 Book
 Category
 Commons
 Portal









Authority control



LCCN: sh95008574
GND: 4401313-9
BNF: cb12533207m (data)
BNE: XX540033












					
						Retrieved from "https://en.wikipedia.org/w/index.php?title=Java_(programming_language)&oldid=832483006"					
				Categories: Java (programming language)Java platformC programming language familyClass-based programming languagesComputer-related introductions in 1995Concurrent programming languagesJava specification requestsJVM programming languagesObject-oriented programming languagesProgramming languagesProgramming languages created in 1995Statically typed programming languagesSun MicrosystemsHidden categories: CS1 maint: BOT: original-url status unknownUse mdy dates from August 2017Wikipedia semi-protected pagesPages using deprecated image syntaxArticles containing potentially dated statements from March 2018All articles containing potentially dated statementsArticles with example Java codeArticles needing cleanup from January 2012All pages needing cleanupArticles containing how-to sectionsArticles needing additional references from December 2014All articles needing additional referencesAll articles with vague or ambiguous timeVague or ambiguous time from December 2014Articles with specifically marked weasel-worded phrases from September 2015Wikipedia articles that may have off-topic paragraphsWikipedia articles with LCCN identifiersWikipedia articles with GND identifiersWikipedia articles with BNF identifiers				
							
		
		
			Navigation menu
			
									
						Personal tools
						
							Not logged inTalkContributionsCreate accountLog in						
					
									
										
						Namespaces
						
							ArticleTalk						
					
										
												
						
							Variants
						
						
							
															
						
					
									
				
										
						Views
						
							ReadView sourceView history						
					
										
						
						More
						
							
															
						
					
										
						
							Search
						
						
							
															
						
					
									
			
			
				
						
			Navigation
			
								
					Main pageContentsFeatured contentCurrent eventsRandom articleDonate to WikipediaWikipedia store				
							
		
			
			Interaction
			
								
					HelpAbout WikipediaCommunity portalRecent changesContact page				
							
		
			
			Tools
			
								
					What links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationWikidata itemCite this page				
							
		
			
			Print/export
			
								
					Create a bookDownload as PDFPrintable version				
							
		
			
			In other projects
			
								
					Wikimedia CommonsWikibooksWikiquoteWikiversity				
							
		
			
			Languages
			
								
					AcèhAfrikaansአማርኛالعربيةঅসমীয়াAzərbaycancaتۆرکجهবাংলাBân-lâm-gúБеларускаяБеларуская (тарашкевіца)‎БългарскиBosanskiCatalàЧӑвашлаČeštinaCorsuCymraegDanskDeutschEestiΕλληνικάEspañolEsperantoEuskaraفارسیFrançaisGaeilgeGalegoગુજરાતી客家語/Hak-kâ-ngî한국어Հայերենहिन्दीHrvatskiBahasa IndonesiaInterlinguaÍslenskaItalianoעבריתಕನ್ನಡქართულიҚазақшаKreyòl ayisyenКыргызчаLatinaLatviešuLietuviųLigureLumbaartMagyarМакедонскиമലയാളംमराठीBahasa MelayuBaso MinangkabauMìng-dĕ̤ng-ngṳ̄Монголမြန်မာဘာသာNederlandsनेपाली日本語NorskNorsk nynorskOccitanଓଡ଼ିଆOʻzbekcha/ўзбекчаਪੰਜਾਬੀPolskiPortuguêsQaraqalpaqshaRomânăРусскийСаха тылаScotsShqipසිංහලSimple EnglishسنڌيSlovenčinaSlovenščinaSoomaaligaکوردیСрпски / srpskiSrpskohrvatski / српскохрватскиSuomiSvenskaTagalogதமிழ்Татарча/tatarçaతెలుగుไทยТоҷикӣTürkçeᨅᨔ ᨕᨘᨁᨗУкраїнськаVènetoTiếng ViệtWinaray吴语粵語Žemaitėška中文				
				Edit links			
		
				
		
				
						
								 This page was last edited on 26 March 2018, at 08:53.
								Text is available under the Creative Commons Attribution-ShareAlike License;
additional terms may apply.  By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.
							
						
								Privacy policy
								About Wikipedia
								Disclaimers
								Contact Wikipedia
								Developers
								Cookie statement
								Mobile view
							
										
										
											
										
											
									
						
		
		(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.808","walltime":"1.003","ppvisitednodes":{"value":6119,"limit":1000000},"ppgeneratednodes":{"value":0,"limit":1500000},"postexpandincludesize":{"value":245878,"limit":2097152},"templateargumentsize":{"value":10388,"limit":2097152},"expansiondepth":{"value":20,"limit":40},"expensivefunctioncount":{"value":12,"limit":500},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":88490,"limit":5000000},"entityaccesscount":{"value":1,"limit":400},"timingprofile":["100.00%  808.326      1 -total"," 40.70%  328.986      1 Template:Reflist"," 29.71%  240.126     63 Template:Cite_web","  8.70%   70.348      1 Template:Infobox_programming_language","  8.19%   66.227      1 Template:Infobox","  5.36%   43.318      1 Template:Pp-semi","  4.43%   35.780      5 Template:Navbox","  4.29%   34.669      3 Template:Fix","  3.52%   28.451      2 Template:Ambox","  3.48%   28.090      1 Template:Howto"]},"scribunto":{"limitreport-timeusage":{"value":"0.395","limit":"10.000"},"limitreport-memusage":{"value":8597877,"limit":52428800}},"cachereport":{"origin":"mw1274","timestamp":"20180402011239","ttl":1900800,"transientcontent":false}}});});(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgBackendResponseTime":107,"wgHostname":"mw1320"});});
	

