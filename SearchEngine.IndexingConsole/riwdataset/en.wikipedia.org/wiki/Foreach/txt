



Foreach loop - Wikipedia
document.documentElement.className = document.documentElement.className.replace( /(^|\s)client-nojs(\s|$)/, "$1client-js$2" );
(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Foreach_loop","wgTitle":"Foreach loop","wgCurRevisionId":823449598,"wgRevisionId":823449598,"wgArticleId":623068,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Articles with example Ada code","Articles with example Perl code","Articles with example PHP code","Articles with example Python code","Articles with example Java code","Articles with example Haskell code","Articles with example Racket code","Articles with example Smalltalk code","Articles with example Tcl code","Control flow","Programming language comparisons"],"wgBreakFrames":false,"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgMonthNamesShort":["","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"wgRelevantPageName":"Foreach_loop","wgRelevantArticleId":623068,"wgRequestId":"WsFhmQpAMFoAALVKHhcAAAAV","wgIsProbablyEditable":true,"wgRelevantPageIsProbablyEditable":true,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgRedirectedFrom":"Foreach","wgFlaggedRevsParams":{"tags":{}},"wgStableRevisionId":null,"wgWikiEditorEnabledModules":[],"wgBetaFeaturesFeatures":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgPopupsShouldSendModuleToUser":true,"wgPopupsConflictsWithNavPopupGadget":false,"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en","usePageImages":true,"usePageDescriptions":true},"wgPreferredVariant":"en","wgMFExpandAllSectionsUserOption":true,"wgMFEnableFontChanger":true,"wgMFDisplayWikibaseDescriptions":{"search":true,"nearby":true,"watchlist":true,"tagline":false},"wgRelatedArticles":null,"wgRelatedArticlesUseCirrusSearch":true,"wgRelatedArticlesOnlyUseCirrusSearch":false,"wgULSCurrentAutonym":"English","wgNoticeProject":"wikipedia","wgCentralNoticeCookiesToDelete":[],"wgCentralNoticeCategoriesUsingLegacy":["Fundraising","fundraising"],"wgCategoryTreePageCategoryOptions":"{\"mode\":0,\"hideprefix\":20,\"showcount\":true,\"namespaces\":false}","wgInternalRedirectTargetUrl":"/wiki/Foreach_loop","wgWikibaseItemId":"Q3273595","wgScoreNoteLanguages":{"arabic":"العربية","catalan":"català","deutsch":"Deutsch","english":"English","espanol":"español","italiano":"italiano","nederlands":"Nederlands","norsk":"norsk","portugues":"português","suomi":"suomi","svenska":"svenska","vlaams":"West-Vlams"},"wgScoreDefaultNoteLanguage":"nederlands","wgCentralAuthMobileDomain":false,"wgCodeMirrorEnabled":false,"wgVisualEditorToolbarScrollOffset":0,"wgVisualEditorUnsupportedEditParams":["undo","undoafter","veswitched"],"wgEditSubmitButtonLabelPublish":true});mw.loader.state({"ext.gadget.charinsert-styles":"ready","ext.globalCssJs.user.styles":"ready","ext.globalCssJs.site.styles":"ready","site.styles":"ready","noscript":"ready","user.styles":"ready","user":"ready","user.options":"ready","user.tokens":"loading","ext.cite.styles":"ready","ext.pygments":"ready","wikibase.client.init":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.uls.interlanguage":"ready","ext.wikimediaBadges":"ready","mediawiki.legacy.shared":"ready","mediawiki.legacy.commonPrint":"ready","mediawiki.sectionAnchor":"ready","mediawiki.skinning.interface":"ready","skins.vector.styles":"ready","ext.globalCssJs.user":"ready","ext.globalCssJs.site":"ready"});mw.loader.implement("user.tokens@1dqfd7l",function($,jQuery,require,module){/*@nomin*/mw.user.tokens.set({"editToken":"+\\","patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});
});mw.loader.load(["mediawiki.action.view.redirect","ext.cite.a11y","site","mediawiki.page.startup","mediawiki.user","mediawiki.hidpi","mediawiki.page.ready","mediawiki.toc","mediawiki.searchSuggest","ext.gadget.teahouse","ext.gadget.ReferenceTooltips","ext.gadget.watchlist-notice","ext.gadget.DRN-wizard","ext.gadget.charinsert","ext.gadget.refToolbar","ext.gadget.extra-toolbar-buttons","ext.gadget.switcher","ext.centralauth.centralautologin","mmv.head","mmv.bootstrap.autostart","ext.popups","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","ext.eventLogging.subscriber","ext.wikimediaEvents","ext.navigationTiming","ext.uls.eventlogger","ext.uls.init","ext.uls.compactlinks","ext.uls.interface","ext.3d","ext.centralNotice.geoIP","ext.centralNotice.startUp","skins.vector.js"]);});























		
		
		
			
			

Foreach loop			
				From Wikipedia, the free encyclopedia				  (Redirected from Foreach)
								
					Jump to:					navigation, 					search
				
				



For each loops are almost always used to iterate over items in a sequence of elements.




Loop constructs


Do while loop


While loop


For loop


Foreach loop


Infinite loop


Control flow


For each (or foreach) is a control flow statement for traversing items in a collection. Foreach is usually used in place of a standard for statement. Unlike other for loop constructs, however, foreach loops[1] usually maintain no explicit counter: they essentially say "do this to everything in this set", rather than "do this x times". This avoids potential off-by-one errors and makes code simpler to read. In object-oriented languages an iterator, even if implicit, is often used as the means of traversal.
The foreach statement in some languages has some defined order, processing each item in the collection from the first to the last. The foreach statement in many other languages does not have any particular order, especially array programming languages, in order to support loop optimization in general and in particular to allow vector processing to process some or all of the items in the collection simultaneously.



Contents


1 Syntax
2 Language support

2.1 ActionScript
2.2 Ada
2.3 C
2.4 C#
2.5 C++
2.6 C++/CLI
2.7 ColdFusion Markup Language (CFML)

2.7.1 Script syntax
2.7.2 Tag syntax


2.8 Common Lisp
2.9 D
2.10 Dart
2.11 Object Pascal, Delphi
2.12 Eiffel
2.13 Go
2.14 Groovy
2.15 Haskell
2.16 Haxe
2.17 Java
2.18 JavaScript
2.19 Lua[14]
2.20 Mathematica
2.21 MATLAB
2.22 Mint
2.23 Objective-C
2.24 OCaml
2.25 ParaSail
2.26 Pascal
2.27 Perl
2.28 Perl 6
2.29 PHP
2.30 Python
2.31 Racket
2.32 Ruby
2.33 Scala
2.34 Scheme
2.35 Smalltalk
2.36 Swift
2.37 SystemVerilog
2.38 Tcl
2.39 Visual Basic .NET
2.40 Windows PowerShell
2.41 Extensible Stylesheet Language (XSL)


3 See also
4 References



Syntax[edit]
Syntax varies among languages. Most use the simple word for, roughly as follows:

for each item in collection:
  do something to item

Language support[edit]
Programming languages which support foreach loops include ABC, ActionScript, Ada, C++11, C#, ColdFusion Markup Language (CFML), Cobra, D, Daplex (query language), ECMAScript, Erlang, Java (since 1.5, using the reserved word for for the for loop and the foreach loop), JavaScript, Lua, Objective-C (since 2.0), ParaSail, Perl, PHP, Python, REALbasic, Ruby, Scala, Smalltalk, Swift, Tcl, tcsh, Unix shells, Visual Basic .NET, and Windows PowerShell. Notable languages without foreach are C, and C++ pre-C++11.
ActionScript[edit]
ActionScript supports foreach loops by key/index and by value:


for ( var key:String in someObject ) {
   var value = someObject[key];
   trace( "someObject[" + key + "] = " + someObject[key] );
}

for each ( var value in someArray ) {
   trace( typeof value + " " + value );
}

Typical usage is as shown, but someArray could be any object, and someObject could be an array.
Ada[edit]



The Wikibook Ada Programming has a page on the topic of: Control


Ada supports foreach loops as part of the normal for loop. Say X is an array:


for I in X'Range loop
   X (I) := Get_Next_Element;
end loop;

This syntax is used on mostly arrays, but will also work with other types when a full iteration is needed.
Ada 2012 has generalized loops to foreach loops on any kind of container (array, lists, maps...):


for Obj of X loop
   -- Work on Obj
end loop;

C[edit]
The language C does not have collections or a foreach construct. However, it has several standard data structures that can be used as collections, and foreach can be made easily with a macro.
However, two obvious problems occur:

The macro is unhygienic: it declares a new variable in the existing scope which remains after the loop.
One foreach macro cannot be defined that works with different collection types (e.g., array and linked list) or that is extensible to user types.

C string as a collection of char


 1 #include <stdio.h>
 2 #include <stdlib.h>
 3 /* foreach macro for using a string as a collection of char */
 4 #define foreach( ptrvar, strvar ) char* ptrvar; for( ptrvar=strvar ; (*ptrvar) != '\0' ; *ptrvar++)
 5 
 6 int main(int argc,char* argv[]){
 7  char* s1 = "abcdefg";
 8  char* s2 = "123456789";
 9  foreach (p1, s1) {
10   printf("loop 1 %c\n",*p1);
11  }
12  foreach (p2, s2){
13   printf("loop 2 %c\n",*p2);
14  }
15  exit(0);
16  return(0);
17 }

C int array as a collection of int (array size known at compile-time)


 1 #include <stdio.h>
 2 #include <stdlib.h>
 3 int main(int argc, char* argv[]){
 4 /* foreach macro viewing an array of int values as a collection of int values */
 5 #define foreach( intpvar, intary ) int* intpvar; for( intpvar=intary; intpvar < (intary + (sizeof(intary)/sizeof(intary[0]))) ; intpvar++)
 6  int a1[] = { 1, 1, 2, 3, 5, 8 };
 7  int a2[] = { 3, 1, 4, 1, 5, 9 };
 8  foreach (p1, a1) {
 9   printf("loop 1 %d\n", *p1);
10  }
11  foreach (p2, a2){
12   printf("loop 2 %d\n", *p2);
13  }
14  exit(0);
15  return(0);
16 }

Most general: string or array as collection (collection size known at run-time)

Note: idxtype can be removed and typeof(col[0]) used in its place with GCC



 1 #include <stdio.h>
 2 #include <stdlib.h>
 3 #include <string.h>
 4 int main(int argc, char* argv[]){
 5 #define foreach(idxtype, idxpvar, col, colsiz ) idxtype* idxpvar; for( idxpvar=col ; idxpvar < (col + (colsiz)) ; idxpvar++)
 6 #define arraylen( ary ) ( sizeof(ary)/sizeof(ary[0]) )
 7  char* c1 = "collection";
 8  int c2[] = { 3, 1, 4, 1, 5, 9 };
 9  double* c3;
10  int c3len = 4;
11  c3 = (double*)calloc(c3len, sizeof(double)); 
12  c3[0] = 1.2; c3[1] = 3.4; c3[2] = 5.6; c3[3] = 7.8;
13 
14  foreach (char, p1, c1, strlen(c1) ) {
15   printf("loop 1 : %c\n",*p1);
16  }
17  foreach (int, p2, c2, arraylen(c2) ){
18   printf("loop 2 : %d\n",*p2);
19  }
20  foreach (double, p3, c3, c3len ){
21   printf("loop 3 : %3.1lf\n",*p3);
22  }
23  exit(0);
24  return(0);
25 }

C#[edit]
In C#, assuming that myArray is an array of integers:


foreach (int x in myArray) { Console.WriteLine(x); }

Language Integrated Query (LINQ) provides the following syntax, accepting a delegate or lambda expression:


myArray.ToList().ForEach(x => Console.WriteLine(x));

C++[edit]
C++11 provides a foreach loop. The syntax is similar to that of Java:


#include <iostream>

int main()
{
  int myint[] = {1, 2, 3, 4, 5};

  for (int i : myint)
  {
    std::cout << i << '\n';
  }
}

Currently, C++11 range-based for statements have been implemented in GNU Compiler Collection (GCC) (since version 4.6), Clang (since version 3.0) and Visual C++ 2012 (version 11 [2])
The C++ STL also supports for_each[3], that applies each element to a function, which can be any predefined function or a lambda expression. While the direction of the range-based for is only from the beginning to the end, you can change the direction or range by altering the first two parameters.


#include <iostream>
#include <functional> // contains std::for_each
#include <vector>

int main()
{
  std::vector<int> v {1, 2, 3, 4, 5};

  std::for_each(v.begin(), v.end(), [&](int i)
  {
    std::cout << i << '\n';
  });

  std::cout << "reversed but skip 2 elements:\n";

  std::for_each(v.rbegin()+2, v.rend(), [&](int i)
  {
    std::cout << i << '\n';
  });
}

Qt, a C++ framework, offers a macro providing foreach loops[4] using the STL iterator interface:


#include <QList>
#include <QDebug>

int main()
{
  QList<int> list;

  list << 1 << 2 << 3 << 4 << 5;

  foreach (int i, list)
  {
    qDebug() << i;
  }
}

Boost, a set of free peer-reviewed portable C++ libraries also provides foreach loops:[5]


#include <boost/foreach.hpp>
#include <iostream>
 
int main()
{
  int myint[] = {1, 2, 3, 4, 5};
 
  BOOST_FOREACH(int &i, myint)
  {
    std::cout << i << '\n';
  }
}

C++/CLI[edit]
The C++/CLI language proposes a construct similar to C#.
Assuming that myArray is an array of integers:


    for each (int x in myArray)
    {
        Console::WriteLine(x);
    }

ColdFusion Markup Language (CFML)[edit]
Main article: ColdFusion Markup Language
Script syntax[edit]


// arrays
arrayeach([1,2,3,4,5], function(v){
    writeOutput(v);
});

// or

for (v in [1,2,3,4,5]){
    writeOutput(v);
}

// or

// (Railo only; not supported in ColdFusion)
letters = ["a","b","c","d","e"];
letters.each(function(v){
    writeOutput(v); // abcde
});

// structs
for (k in collection){
    writeOutput(collection[k]);
}

// or

structEach(collection, function(k,v){
    writeOutput("key: #k#, value: #v#;");
});

// or
// (Railo only; not supported in ColdFusion)
collection.each(function(k,v){
    writeOutput("key: #k#, value: #v#;");
});

Tag syntax[edit]


<!--- arrays --->
<cfloop index="v" array="#['a','b','c','d','e']#">
  <cfoutput>#v#</cfoutput><!--- a b c d e  --->
</cfloop>

CFML incorrectly identifies the value as "index" in this construct; the index variable does receive the actual value of the array element, not its index.


<!--- structs --->
<cfloop item="k" collection="#collection#">
    <cfoutput>#collection[k]#</cfoutput>
</cfloop>

Common Lisp[edit]
Common Lisp provides foreach ability either with the dolist macro:


(dolist (i '(1 3 5 6 8 10 14 17))
  (print i))

or the powerful loop macro to iterate on more data types


(loop for i in '(1 3 5 6 8 10 14 17)
      do (print i))

and even with the mapcar function:


(mapcar #'print '(1 3 5 6 8 10 14 17))

D[edit]
Main article: D (programming language)


foreach(item; set) {
  // do something to item
}
or
foreach(argument) {
  // pass value
}

Dart[edit]
Main article: Dart (programming language)


for (final element in someCollection) {
  // do something with element
}

Object Pascal, Delphi[edit]
Main article: Object Pascal
Foreach support was added in Delphi 2005, and uses an enumerator variable that must be declared in the var section.


for enumerator in collection do
begin
  //do something here
end;

Eiffel[edit]
The iteration (foreach) form of the Eiffel loop construct is introduced by the keyword across.
In this example, every element of the structure my_list is printed:


            across my_list as ic loop print (ic.item) end

The local entity ic is an instance of the library class ITERATION_CURSOR. The cursor's feature item provides access to each structure element. Descendants of class ITERATION_CURSOR can be created to handle specialized iteration algorithms. The types of objects that can be iterated across (my_list in the example) are based on classes that inherit from the library class ITERABLE.
The iteration form of the Eiffel loop can also be used as a boolean expression when the keyword loop is replaced by either all (effecting universal quantification) or some (effecting existential quantification).
This iteration is a boolean expression which is true if all items in my_list have counts greater than three:


            across my_list as ic all ic.item.count > 3 end

The following is true if at least one item has a count greater than three:


            across my_list as ic some ic.item.count > 3 end

Go[edit]
Go's foreach loop can be used to loop over an array, slice, string, map, or channel.
Using the two-value form, we get the index/key (first element) and the value (second element):


for index, value := range someCollection {
	// Do something to index and value
}

Using the one-value form, we get the index/key (first element):


for index := range someCollection {
	// Do something to index
}

[6]
Groovy[edit]
Groovy supports for loops over collections like arrays, lists and ranges:


def x = [1,2,3,4]
for (v in x)           // loop over the 4-element array x
{
    println v
}

for (v in [1,2,3,4])   // loop over 4-element literal list 
{
    println v
}

for (v in 1..4)        // loop over the range 1..4
{
    println v
}

Groovy also supports a C-style for loop with an array index:


for (i = 0; i < x.size(); i++)
{
    println x[i]
}

Collections in Groovy can also be iterated over using the each keyword and a closure. By default, the loop dummy is named it


x.each{ println it }     // print every element of the x array
x.each{i-> println i}    // equivalent to line above, only loop dummy explicitly named "i"

Haskell[edit]
Haskell allows looping over lists with monadic actions using mapM_ and forM_ (mapM_ with its arguments flipped) from Control.Monad:


code
prints





mapM_ print [1..4]




1
2
3
4






forM_ "test" $ \char -> do 
    putChar char
    putChar char




tteesstt



It's also possible to generalize those functions to work on applicative functors rather than monads and any data structure that is traversable using traverse (for with its arguments flipped) and mapM (forM with its arguments flipped) from Data.Traversable.
Haxe[edit]
Main article: Haxe


for (value in iterable) {
    trace(value);
}

Lambda.iter(iterable, function(value) trace(value));

Java[edit]
In Java, a foreach-construct was introduced in Java Development Kit (JDK) 1.5.0.[7]
Official sources use several names for the construct. It is referred to as the "Enhanced for Loop",[7] the "For-Each Loop",[8] and the "foreach statement".[9]


for (Type item : iterableCollection) {
    // Do something to item
}

JavaScript[edit]
For unordered iteration over the keys in an Object, JavaScript features the for...in loop:


for (var key in object) {
    // Do stuff with object[key]
}

To limit the iteration to the object's own properties, excluding those inherited through the prototype chain, it is sometimes useful to add a hasOwnProperty() test, if supported by the JavaScript engine (for WebKit/Safari, this means "in version 3 or later").


for (var key in object) {
    if (object.hasOwnProperty(key)) {
        // Do stuff with object[key]
    }
}

In ECMAScript 5 it is possible to use the keys method of the Object function to iterate over the own keys of an object more naturally. [10]


var book = { name: "A Christmas Carol", author: "Charles Dickens" }; 
Object.keys(book).forEach(function (key, index) {
    alert("PropertyName = " key + " Property Value = " + book[key]);
}

In ECMAScript 5 it's also possible to use the forEach method of a native array.[11]


var animals = ['dog', 'cat', 'bear'];
animals.forEach(function(animal, index) {
    alert(index + ':' + animal); // '0:dog', '1:cat', '2:bear'
});

Gecko’s JavaScript engine also has a for each...in statement, which iterates over the values in the object, not the keys.[12]
Also note that it is inadvisable to use either a for...in or for each...in statement on an Array object in JavaScript, due to the above issue of properties inherited from prototypes, and also because it only iterates over existent keys and is not guaranteed to iterate over the elements in any particular order.[13] A regular C-style for loop should be used instead. The EcmaScript 6 standard has for..of for index-less iteration over generators, arrays and more.
Lua[14][edit]
Main article: Lua (programming language)
Iterate only through numerical index values:


for index, value in ipairs(array) do
	-- do something
end

Iterate through all index values:


for index, value in pairs(array) do
	-- do something
end

Mathematica[edit]
Main article: Mathematica
In Mathematica, Do will simply evaluate an expression for each element of a list, without returning any value.


In[]:= Do[doSomethingWithItem, {item, list}]

It is more common to use Table, which returns the result of each evaluation in a new list.


In[]:= list = {3, 4, 5};

In[]:= Table[item^2, {item, list}]
Out[]= {9, 16, 25}

MATLAB[edit]
Main article: MATLAB


for item = array
%do something
end

Mint[edit]
For each loops are supported in Mint, possessing the following syntax:


for each element of list
    /* 'Do something.' */
end

The for (;;) or while (true) infinite loop in Mint can be written using a for each loop and an infinitely long list.[15]


import type
/* 'This function is mapped to'
 * 'each index number i of the'
 * 'infinitely long list.'
 */
sub identity(x)
    return x
end
/* 'The following creates the list'
 * '[0, 1, 2, 3, 4, 5, ..., infinity]'
 */
infiniteList = list(identity)
for each element of infiniteList
    /* 'Do something forever.' */
end

Objective-C[edit]
Foreach loops, called Fast enumeration, are supported starting in Objective-C 2.0. They can be used to iterate over any object that implements the NSFastEnumeration protocol, including NSArray, NSDictionary (iterates over keys), NSSet, etc.


NSArray *a = [NSArray new];       // Any container class can be substituted

for(id obj in a) {                // Note the dynamic typing (we do not need to know the
                                  // Type of object stored in 'a'.  In fact, there can be
                                  // many different types of object in the array.

    printf("%s\n", [[obj description] UTF8String]);  // Must use UTF8String with %s
    NSLog(@"%@", obj);                               // Leave as an object
}

NSArrays can also broadcast a message to their members:


NSArray *a = [NSArray new];

[a makeObjectsPerformSelector:@selector(printDescription)];

Where blocks are available, an NSArray can automatically perform a block on every contained item:


[myArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop)
	{
		NSLog(@"obj %@", obj);
		if ([obj shouldStopIterationNow])
			*stop = YES;
	}];

The type of collection being iterated will dictate the item returned with each iteration. For example:


NSDictionary *d = [NSDictionary new];

for(id key in d) {
    NSObject *obj = [d objectForKey:key];      // We use the (unique) key to access the (possibly nonunique) object.
    NSLog(@"%@", obj);
}

OCaml[edit]
OCaml is a functional language. Thus, the equivalent of a foreach loop can be achieved as a library function over lists and arrays.
For lists:


List.iter (fun x -> print_int x) [1;2;3;4];;

or in short way:


List.iter print_int [1;2;3;4];;

For arrays:


Array.iter (fun x -> print_int x) [|1;2;3;4|];;

or in short way:


Array.iter print_int [|1;2;3;4|];;

ParaSail[edit]
The ParaSail parallel programming language supports several kinds of iterators, including a general "for each" iterator over a container:


var Con : Container<Element_Type> := ...
// ...
for each Elem of Con concurrent loop  // loop may also be "forward" or "reverse" or unordered (the default)
  // ... do something with Elem
end loop

ParaSail also supports filters on iterators, and the ability to refer to both the key and the value of a map. Here is a forward iteration over the elements of "My_Map" selecting only elements where the keys are in "My_Set":


var My_Map : Map<Key_Type => Univ_String, Value_Type => Tree<Integer>> := ...
const My_Set : Set<Univ_String> := ["abc", "def", "ghi"];

for each [Str => Tr] of My_Map {Str in My_Set} forward loop
   // ... do something with Str or Tr
end loop

Pascal[edit]
In Pascal, ISO standard 10206:1990 introduced iteration over set types, thus:


var
  elt: ElementType;
  eltset: set of ElementType;

{...}

for elt in eltset do
  { ... do something with elt }

Perl[edit]
In Perl, foreach (which is equivalent to the shorter for) can be used to traverse elements of a list. The expression which denotes the collection to loop over is evaluated in list-context and each item of the resulting list is, in turn, aliased to the loop variable.
List literal example:


foreach (1, 2, 3, 4) {
    print $_;
}

Array examples:


foreach (@arr) {
    print $_;
}



foreach $x (@arr) { #$x is the element in @arr
    print $x;
}

Hash example:


foreach $x (keys %hash) {
    print $x . " = " . $hash{$x}; # $x is a key in %hash and $hash{$x} is its value
}

Direct modification of collection members:


@arr = ( 'remove-foo', 'remove-bar' );
foreach $x (@arr){
    $x =~ s/remove-//;
}
# Now @arr = ('foo', 'bar');

Perl 6[edit]
In Perl 6, a distinct language from Perl 5, for must be used to traverse elements of a list. (foreach is no longer allowed.) The expression which denotes the collection to loop over is evaluated in list-context, but not flattened by default, and each item of the resulting list is, in turn, aliased to the loop variable(s).
List literal example:


for 1..4 {
    .say;
}

Array examples:


for @arr {
    .say;
}



.say for @arr;



for @arr -> $x {
    say $x;
}



for @arr -> $x, $y {    # more than one item at a time
    say "$x, $y";
}

Hash example:


for keys %hash -> $key {
    say "$key: $hash{$key}";
}

or


for %hash.kv -> $key, $value {
    say "$key: $value";
}

or


for %hash -> $x {
    say "$x.key(): $x.value()";    # Parentheses needed to inline in double quoted string
}

Direct modification of collection members:


@arr = 1,2,3;
for @arr -> $x {
    $x *= 2;
}
# Now @arr = 2,4,6;

PHP[edit]
Main article: PHP


                                                 
foreach ($set as $value)
{
    // Do something to $value;
}

It is also possible to extract both keys and values using the alternate syntax:


foreach ($set as $key => $value) {
    echo "{$key} has a value of {$value}";
}

Direct modification of collection members:


$arr = array(1, 2, 3);
foreach ($arr as &$value) { // Note the &, $value is a reference to the original value inside $arr
    $value++;
}
// Now $arr = array(2, 3, 4);

// also works with the full syntax
foreach ($arr as $key => &$value) {
    $value++;
}


More information

Python[edit]
Main article: Python (programming language)


for item in iterable_collection:
    # do something with item

Python's tuple assignment, fully available in its foreach loop, also makes it trivial to iterate on (key, value) pairs in associative arrays:


for key, value in some_dict.items(): # direct iteration on a dict iterates on its keys
    # do stuff

As for ... in is the only kind of for loop in Python, the equivalent to the "counter" loop found in other languages is...


for i in range(len(seq)):
    # do something to seq[i]

... though using the enumerate function is considered more "Pythonic":


for i, item in enumerate(seq):
    # do stuff with item
    # possibly assign it back to seq[i]

Racket[edit]
Main article: Racket (programming language)


(for ([item set])
  (do-something-with item))

or using the conventional Scheme for-each function:


(for-each do-something-with a-list)

do-something-with is a one-argument function.
Ruby[edit]
Main article: Ruby (programming language)


set.each do |item|
  # do something to item
end

or


for item in set
  # do something to item
end

This can also be used with a hash.


set.each do |item,value|
  # do something to item
  # do something to value
end

Scala[edit]
Main article: Scala (programming language)


// return list of modified elements
items map { x => doSomething(x) }
items map multiplyByTwo

for {x <- items} yield doSomething(x)
for {x <- items} yield multiplyByTwo(x)

// return nothing, just perform action
items foreach { x => doSomething(x) }
items foreach println

for {x <- items} doSomething(x)
for {x <- items} println(x)

Scheme[edit]
Main article: Scheme (programming language)


(for-each do-something-with a-list)

do-something-with is a one-argument function.
Smalltalk[edit]
Main article: Smalltalk


collection do: [:item| "do something to item" ]

Swift[edit]
Swift uses the for…in construct to iterate over members of a collection.[16]


for thing in someCollection {
    // do something with thing
}

The for…in loop is often used with the closed and half-open range constructs to iterate over the loop body a certain number of times.


for i in 0..<10 {
    // 0..<10 constructs a half-open range, so the loop body
    // is repeated for i = 0, i = 1, …, i = 9.
}

for i in 0...10 {
    // 0...10 constructs a closed range, so the loop body
    // is repeated for i = 0, i = 1, …, i = 9, i = 10.
}

SystemVerilog[edit]
SystemVerilog supports iteration over any vector or array type of any dimensionality using the foreach keyword.
A trivial example iterates over an array of integers:


code
prints





int  array_1d[] = '{ 3, 2, 1, 0 };

foreach array_1d[index]
  $display("array_1d[%0d]: %0d", index, array_1d[index]);




array_1d[0]: 3
array_1d[1]: 2
array_1d[2]: 1
array_1d[3]: 0



A more complex example iterates over an associative array of arrays of integers:


code
prints





int  array_2d[string][] = '{ "tens": '{ 10, 11 },
                             "twenties": '{ 20, 21 } };

foreach array_2d[key,index]
  $display("array_2d[%s,%0d]: %0d", key, index, array_2d[key,index]);




array_2d[tens,0]: 10
array_2d[tens,1]: 11
array_2d[twenties,0]: 20
array_2d[twenties,1]: 21



Tcl[edit]
Tcl uses foreach to iterate over lists. It is possible to specify more than one iterator variable, in which case they are assigned sequential values from the list.


code
prints





foreach {i j} {1 2 3 4 5 6} {
    puts "$i $j"
}




1 2
3 4
5 6



It is also possible to iterate over more than one list simultaneously. In the following i assumes sequential values of the first list, j sequential values of the second list:


code
prints





foreach i {1 2 3} j {a b c}  {
    puts "$i $j"
}




1 a
2 b
3 c



Visual Basic .NET[edit]
Main article: Visual Basic .NET


For Each item In enumerable
    ' Do something with item.
Next

or without type inference


For Each item As type In enumerable
    ' Do something with item.
Next

Windows PowerShell[edit]
Main article: Windows PowerShell


foreach ($item in $set) {
    # Do something to $item
}

From a pipeline


$list | ForEach-Object {Write-Host $_}

Extensible Stylesheet Language (XSL)[edit]
Main article: XSL


 <xsl:for-each select="set">
   <!-- do something for the elements in <set> -->
 </xsl:for-each>

[17]
See also[edit]

Do while loop
For loop
While loop
Map (higher-order function)

References[edit]


^ "D Programming Language foreach Statement Documentation". Digital Mars. Retrieved 2008-08-04. 
^ "C++11 Features in Visual C++ 11 - Visual C++ Team Blog - Site Home - MSDN Blogs". Blogs.msdn.com. 2011-09-12. Retrieved 2013-08-04. 
^ "std::for_each - cppreference". en.cppreference.com. Retrieved 2017-09-30. 
^ "Qt 4.2: Generic Containers". Doc.qt.digia.com. Retrieved 2013-08-04. 
^ Eric Niebler (2013-01-31). "Chapter 9. Boost.Foreach - 1.53.0". Boost.org. Retrieved 2013-08-04. 
^ "Range Clause". The Go Programming Language Specification. The Go Programming Language. Retrieved October 20, 2013. 
^ a b "Enhanced for Loop - This new language construct[...]" "Java Programming Language, Section: Enhancements in JDK 5". Sun Microsystems, Inc. 2004. Retrieved 2009-05-26. 
^ "The For-Each Loop" "The For-Each Loop". Sun Microsystems, Inc. 2008. Retrieved 2009-05-10. 
^ "Implementing this interface allows an object to be the target of the "foreach" statement." "Iterable (Java Platform SE 6)". Sun Microsystems, Inc. 2004. Retrieved 2009-05-12. 
^ "Object.keys". Mozilla Developer Network. Retrieved May 7, 2014. 
^ "Array.prototype.forEach". Mozilla Developer Network. Retrieved October 20, 2013. 
^ "JavaScript - for each...in statement". Mozilla Developer Network. Retrieved 2008-10-03. 
^ "JavaScript - for...in statement on arrays". Mozilla Developer Network. Retrieved 2008-10-03. 
^ "Lua Programming/Tables - Wikibooks, open books for an open world". en.wikibooks.org. Retrieved 2017-12-06. 
^ Chu, Oliver. "Mint Tutorial". Retrieved 20 October 2013. 
^ https://developer.apple.com/library/prerelease/ios/documentation/swift/conceptual/swift_programming_language/ControlFlow.html#//apple_ref/doc/uid/TP40014097-CH9-XID_153
^ "XSLT <xsl:for-each> Element". W3Schools.com. 








					
						Retrieved from "https://en.wikipedia.org/w/index.php?title=Foreach_loop&oldid=823449598"					
				Categories: Articles with example Racket codeArticles with example Smalltalk codeArticles with example Tcl codeControl flowProgramming language comparisonsHidden categories: Articles with example Ada codeArticles with example Perl codeArticles with example PHP codeArticles with example Python codeArticles with example Java codeArticles with example Haskell code				
							
		
		
			Navigation menu
			
									
						Personal tools
						
							Not logged inTalkContributionsCreate accountLog in						
					
									
										
						Namespaces
						
							ArticleTalk						
					
										
												
						
							Variants
						
						
							
															
						
					
									
				
										
						Views
						
							ReadEditView history						
					
										
						
						More
						
							
															
						
					
										
						
							Search
						
						
							
															
						
					
									
			
			
				
						
			Navigation
			
								
					Main pageContentsFeatured contentCurrent eventsRandom articleDonate to WikipediaWikipedia store				
							
		
			
			Interaction
			
								
					HelpAbout WikipediaCommunity portalRecent changesContact page				
							
		
			
			Tools
			
								
					What links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationWikidata itemCite this page				
							
		
			
			Print/export
			
								
					Create a bookDownload as PDFPrintable version				
							
		
			
			Languages
			
								
					ČeštinaEspañol한국어日本語PolskiPortuguêsРусскийСрпски / srpskiதமிழ்中文				
				Edit links			
		
				
		
				
						
								 This page was last edited on 1 February 2018, at 09:21.
								Text is available under the Creative Commons Attribution-ShareAlike License;
additional terms may apply.  By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.
							
						
								Privacy policy
								About Wikipedia
								Disclaimers
								Contact Wikipedia
								Developers
								Cookie statement
								Mobile view
							
										
										
											
										
											
									
						
		
		(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.232","walltime":"0.294","ppvisitednodes":{"value":1764,"limit":1000000},"ppgeneratednodes":{"value":0,"limit":1500000},"postexpandincludesize":{"value":32047,"limit":2097152},"templateargumentsize":{"value":568,"limit":2097152},"expansiondepth":{"value":12,"limit":40},"expensivefunctioncount":{"value":0,"limit":500},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":94152,"limit":5000000},"entityaccesscount":{"value":0,"limit":400},"timingprofile":["100.00%  224.063      1 -total"," 46.87%  105.013      1 Template:Reflist"," 35.88%   80.400     16 Template:Cite_web"," 11.85%   26.550      1 Template:Loop_constructs"," 11.27%   25.258     18 Template:Main"," 11.19%   25.077      1 Template:Helpbox","  9.82%   22.011      1 Template:Sidebar","  6.64%   14.885      1 Template:Wikibooks","  5.81%   13.028      1 Template:Sister_project","  4.82%   10.790      1 Template:Side_box"]},"scribunto":{"limitreport-timeusage":{"value":"0.089","limit":"10.000"},"limitreport-memusage":{"value":3457923,"limit":52428800}},"cachereport":{"origin":"mw1269","timestamp":"20180331102324","ttl":1900800,"transientcontent":false}}});});(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgBackendResponseTime":78,"wgHostname":"mw1255"});});
	

